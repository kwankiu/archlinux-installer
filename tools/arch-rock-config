#!/bin/bash

################################################################
#                                                              #
#                Arch Rock Configuration Utility               #
#                                                              #
################################################################
# This is like armbian-config or raspi-config or rsetup but for Arch Linux running on Rock 5B / RK3588
################################################################
# Define variables

# Version of this script 
# (For developer : Update whenever there is a change in this file or its related files)
# format of Version Number is YYMMDDN which N is 1-9 count on updates commited on the same day)
utilver=2308191

# Define main / dev branch
branch=dev

# Initialize variables
update_available=false

# URL of the directory containing u-boot images
uboot_url="https://dl.radxa.com/rock5/sw/images/loader/rock-5b/release/"
uboot_debug_url="https://dl.radxa.com/rock5/sw/images/loader/rock-5b/debug/"
edk2_url="https://api.github.com/repos/edk2-porting/edk2-rk3588/releases/latest"
zero_url="https://dl.radxa.com/rock5/sw/images/others/zero.img.gz"

# Directory for storing source files
source_repo_dir="source-repo-dir"

################################################################
# Tools for formatting / styling

# Define terminal color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[1;34m'
NC='\033[0m' # No Color

# Option Picker
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# Echo with colors
colorecho() {
    color="$1"
    text="$2"
    echo -e "${color}${text}${NC}"
}

# Title / Heading
title() {
  clear
  text="$1"
  echo "---------------------------------------------------------------------"
  colorecho "$BLUE" "${text}"
  echo "---------------------------------------------------------------------"
}

################################################################
# Version updates handling

# Check updates
check_util_updates() {
    remote_utilver=$(curl -s "https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/arch-rock-config" | grep -o 'utilver=[0-9]*' | cut -d= -f2)
    if [ "$remote_utilver" -gt "$utilver" ]; then
        update_available=true
    fi
}

# Install / Update Utility to PATH
update_util() {
    if [ "$update_available" = true ] || [ "$1" = "--install" ]; then 
        title "Arch Rock Configuration Utility"
        colorecho "$GREEN" "Installing / Updating Arch Rock Configuration Utility ..."
        if ! [ -x "$(command -v wget)" ]; then
            sudo pacman -Sy wget --noconfirm
        fi

        sudo rm -rf /usr/bin/arch-rock-config
        sudo wget -N -P /usr/bin/ https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/arch-rock-config
        sudo chmod +x /usr/bin/arch-rock-config
        arch-rock-config
    fi
}

################################################################
# Packages Install Tools

install_from_source() {

    cpwd=$(pwd)
    # Install required package
    if ! [ -x "$(command -v git)" ]; then
        sudo pacman -S git --noconfirm
    fi
    
    sudo pacman -S --needed base-devel --noconfirm

    # Ensure folder doesn't exist
    sudo rm -rf ~/$source_repo_dir

    # clone repo
    colorecho "$GREEN" "Cloning Package from source ..."
    cd ~/
    git clone $1 $source_repo_dir

    # Compile & Install
    cd $source_repo_dir

    if [ ! -z $2 ]; then
        cd $2
    fi

    colorecho "$GREEN" "Compiling & Installing Package from source ..."
    makepkg -si

    # Clean Up
    cd $cpwd
    sudo rm -rf ~/$source_repo_dir

}


################################################################
# Functions for Install Kernel

install_rkbsp5_bin() {

    # Install required package
    if ! [ -x "$(command -v yay)" ]; then
        colorecho "$RED" "Package yay not installed."
        install_from_source "https://aur.archlinux.org/yay-git.git"
    fi

    title "Arch Rock Configuration Utility - Install linux-radxa-rkbsp5-bin"

    # remove old kernel files, else the package may not install.
    sudo rm -rf /usr/bin/libmali
    sudo rm -rf /usr/bin/libmaliw
    sudo rm -rf /usr/lib/libmali
    sudo rm -rf /usr/lib/modules
    sudo rm -rf /usr/lib/firmware/mali_csffw.bin
    sudo rm -rf /usr/src/linux-*

    yay -S linux-radxa-rkbsp5-bin
    colorecho "$GREEN" "Installed linux-radxa-rkbsp5"

}

install_rkbsp5_git() {

    # Install required package
    if ! [ -x "$(command -v yay)" ]; then
        colorecho "$RED" "Package yay not installed."
        install_from_source "https://aur.archlinux.org/yay-git.git"
    fi

    title "Arch Rock Configuration Utility - Install linux-radxa-rkbsp5-git"

    # remove old kernel files, else the package may not install.
    sudo rm -rf /usr/bin/libmali
    sudo rm -rf /usr/bin/libmaliw
    sudo rm -rf /usr/lib/libmali
    sudo rm -rf /usr/lib/modules
    sudo rm -rf /usr/lib/firmware/mali_csffw.bin
    sudo rm -rf /usr/src/linux-*

    yay -S linux-radxa-rkbsp5-git
    colorecho "$GREEN" "Installed linux-radxa-rkbsp5"

}

install_midstream() {    

    # Install required package
    if ! [ -x "$(command -v yay)" ]; then
        colorecho "$RED" "Package yay not installed."
        install_from_source "https://aur.archlinux.org/yay-git.git"
    fi

    title "Arch Rock Configuration Utility - Install linux-rk3588-midstream"

    # remove old kernel files, else the package may not install.
    sudo rm -rf /usr/bin/libmali
    sudo rm -rf /usr/bin/libmaliw
    sudo rm -rf /usr/lib/libmali
    sudo rm -rf /usr/lib/modules
    sudo rm -rf /usr/lib/firmware/mali_csffw.bin
    sudo rm -rf /usr/src/linux-*
    sudo rm -rf /boot/*

    install_from_source "https://github.com/hbiyik/hw_necromancer.git" "rock5b/linux-rk3588-midstream"
    colorecho "$GREEN" "Installed linux-rk3588-midstream"

    # apply new extlinux.conf
    colorecho "$GREEN" "Updating extlinux.conf ..."
    sudo mv /boot/extlinux/extlinux.arch.template /boot/extlinux/extlinux.conf

    # Get rootfs partition from the current mount point "/"
    rootfs_partition=$(mount | grep "on / " | awk '{print $1}')

    # Find the UUIDs of the root partition
    root_uuid=$(sudo blkid $rootfs_partition | awk '{print $2}' | tr -d '"')
    echo "Root partition UUID: $root_uuid"

    # Change UUID for extlinux.conf
    sudo sed -i "s|UUID=\\*\\*CHANGEME\\*\\*|$root_uuid|" /boot/extlinux/extlinux.conf
    sudo sed -i "s|UUID=CHANGEME|$root_uuid|" /boot/extlinux/extlinux.conf

    # Install mali_csffw.bin
    colorecho "$GREEN" "Installing mali_csffw.bin ..."
    if ! [ -x "$(command -v wget)" ]; then
        sudo pacman -Sy wget --noconfirm
    fi
    sudo wget -P /lib/firmware https://github.com/JeffyCN/mirrors/raw/488f49467f5b4adb8ae944221698e9a4f9acb0ed/firmware/g610/mali_csffw.bin

}

################################################################
# Utility Main Menu

config_options() {
    title "Arch Rock Configuration Utility"
    options=("System Maintenance - Managing Updates, Bootloader, System, Linux Kernel, etc.")
    options+=("Manage Packages - Install, Update or Downgrade Software Packages.")
    options+=("Performance & Features - Tweak SoC Performance Settings, Enable PWM Fan, Overclocking, etc.")
    options+=("User & Localization - Manage user accounts, Generating Locale, changing Timezone, etc.")

    if [ "$update_available" = true ]; then 
        options+=("Update Configuration Utility to latest version $GREEN(Updates available)$NC")
    fi
    
    options+=("Exit Configuration Utility")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            system_maintenance
            ;;
        1)
            manage_packages
            ;;
        2)
            performance_features
            ;;
        3)
            user_localization
            ;;
        4)
            update_util
            ;;
        *)
            exit 1
            ;;
    esac

}

################################################################
# System Maintenance

# System Maintenance Main Menu
system_maintenance() {
    title "Arch Rock Configuration Utility - System Maintenance"
    options=("Package Updates - Check & Perform Selective / Full System Upgrade")
    options+=("Update SPI Bootloader - Flash Latest Radxa U-Boot")
    options+=("Re-install Kernel - Re-install / Replace Linux Kernel")
    options+=("Move Arch Linux - Copy Arch Linux to another disk.")
    options+=("Return to Main Menu")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            system_update
            ;;
        1)
            flash_uboot
            ;;
        2)
            install_kernel
            ;;
        3)
            move_system
            ;;
        *)
            config_options
            ;;
    esac

}

# System Update
system_update() {

    title "Arch Rock Configuration Utility - Package Updates"
    options=("Back to Main Menu" "Upgrade All Packages" "Upgrade Selected Packages")
    options+=("$GREEN" "----------------------------------------------------" "Upgradable Packages (Press enter to select): " "----------------------------------------------------" "$NC")

    if [ -x "$(command -v yay)" ]; then
        update_list=($(yay -Qu))
            for ((i=0; i<${#update_list[@]}; i+=4)); do
                options+=("${update_list[i]}")
            done
    else
        update_list=($(pacman -Qu | awk -F' ' '{ if (NF == 4) { $5 = "[]" } }1'))
        for ((i=0; i<${#update_list[@]}; i+=5)); do
            options+=("${update_list[i]}")
        done
    fi

    select_option "${options[@]}"
    choice=$?

    if [ "$choice" = "0" ]; then
        config_options
    elif [ "$choice" = "1" ]; then
        if [ -x "$(command -v yay)" ]; then
            yay -Syyu
        else
            sudo pacman -Syyu
        fi
    elif [ "$choice" = "3" ] || [ "$choice" = "4" ] || [ "$choice" = "5" ] || [ "$choice" = "6" ] || [ "$choice" = "7" ]; then
        system_update
    else
        system_update
    fi
}

# Update SPI Bootloader
flash_uboot() {

    if [ ! -e /dev/mtdblock0 ]; then
        colorecho "$RED" "Error : SPI Flash not found"
        sleep 1
        exit 1
    else
        title "Arch Rock Configuration Utility - Update SPI Bootloader"
        colorecho "$GREEN" "Select an option to confirm"
        colorecho "$RED" "Warning : The SPI NOR flash will be cleared."
        echo ""
        options=("Install Radxa U-Boot" "Install Radxa U-Boot (Debug Version)" "Install EDK2 Bootloader for Rock 5A (UEFI)" "Install EDK2 Bootloader for Rock 5B (UEFI)" "Exit")
        select_option "${options[@]}"
        choice=$?

        # Choice
        case $choice in
            0)
                # Fetch the HTML content of the URL and extract the latest image filename
                which_url=$uboot_url
                colorecho "$GREEN" "Fetching latest Radxa U-Boot Image ..."
                latest_image=$(curl -s "$which_url" | grep -o 'rock-5b-spi-image-[a-z0-9-]*\.img' | head -n 1)
                ;;
            1)
                # Fetch the HTML content of the URL and extract the latest image filename
                which_url=$uboot_debug_url
                colorecho "$GREEN" "Fetching latest Radxa U-Boot (Debug Version) Image ..."
                latest_image=$(curl -s "$which_url" | grep -o 'rock-5b-spi-image-[a-z0-9-]*\-debug.img' | head -n 1)
                ;;
            2)
                # Fetch the HTML content of the URL and extract the latest image filename
                which_url=$edk2_url
                colorecho "$GREEN" "Fetching EDK2 Bootloader (UEFI) ..."
                latest_image=$(curl -s "$which_url" | grep -wo "https.*rock-5a.*\.img" | head -n 1)
                which_url="$(dirname "$latest_image")/"
                latest_image=$(basename "$latest_image")
                ;;
            3)
                # Fetch the HTML content of the URL and extract the latest image filename
                which_url=$edk2_url
                colorecho "$GREEN" "Fetching EDK2 Bootloader (UEFI) ..."
                latest_image=$(curl -s "$which_url" | grep -wo "https.*rock-5b.*\.img" | head -n 1)
                which_url="$(dirname "$latest_image")/"
                latest_image=$(basename "$latest_image")
                ;;
            *)
                exit 1
                ;;
        esac
    fi

    ###
    colorecho "$GREEN" "Install bootloader to the SPI NOR flash ..."


    colorecho "$GREEN" "Downloading Zero Image ..."
    curl -LJO ${zero_url}

    if ! [ -x "$(command -v gzip)" ]; then
        sudo pacman -Sy gzip --noconfirm
    fi

    colorecho "$GREEN" "Extracting Zero Image ..."
    gzip -d zero.img.gz

    colorecho "$GREEN" "Flashing Zero Image to SPI NOR flash ..."
    sudo dd if=zero.img of=/dev/mtdblock0

    # Remove zero.img
    sudo rm -rf zero.img

    if [ -n "$latest_image" ]; then
        # Download the latest image using wget
        colorecho "$GREEN" "Downloading SPI U-Boot Image from ${which_url}${latest_image} ..."
        curl -LJO ${which_url}${latest_image}
    else
        colorecho "$RED" "Fetch Error : No image found."
        sleep 1
        exit 1
    fi
    
    colorecho "$GREEN" "Flashing SPI U-Boot Image ${latest_image} to SPI NOR flash ..."
    sudo dd if=${latest_image} of=/dev/mtdblock0
    sync
    colorecho "$GREEN" "Installed bootloader to SPI NOR flash"

    # Remove u-boot image file
    sudo rm -rf ${latest_image}

}

# Re-install Kernel
install_kernel() {

    title "Arch Rock Configuration Utility - Re-install Kernel"
    colorecho "$GREEN" "Select a kernel package to install:"
    echo ""
    options=("linux-radxa-rkbsp5-bin (AUR) - Install Radxa BSP Kernel (Linux 5.10) from Binary Package")
    options+=("linux-radxa-rkbsp5-git (AUR) - Install Radxa BSP Kernel (Linux 5.10) from Source Code")
    options+=("linux-rk3588-midstream (GitHub) - Install Googulator's Experimental Midstream kernel (Linux 6.2) from Source Code")
    #options+=("linux-rk3588-collabora (GitHub) - Install Collabora's Experimental Upstream kernel (Linux 6.5) from Source Code")
    options+=("Exit")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            install_rkbsp5_bin
            ;;
        1)
            install_rkbsp5_git
            ;;
        2)
            install_midstream
            ;;
        *)
            exit 1
            ;;
    esac

    colorecho "$GREEN" "Installation completed."

    # Prompt user if they want to reboot
    read -t 5 -p "Changes have been made. We will reboot your system in 5 seconds. Do you want to reboot now? (y/n): " reboot_choice

    if [[ "$reboot_choice" == "n" || "$reboot_choice" == "N" ]]; then
        echo "You can manually reboot later to apply the changes."
    else
        echo "Rebooting..."
        sudo reboot
    fi
}

# Move Arch Linux
move_system() {
    echo "Not implemented"
}

################################################################
# Manage Packages

# Manage Packages Main Menu
manage_packages() {
    title "Arch Rock Configuration Utility - Manage Packages"
    options=("Install / Update Packages - Install Basic Software / RK3588 Specified / Customized Packages")
    options+=("Downgrade Packages - Install / Downgrade any Arch Linux Packages from Archive")
    options+=("Return to Main Menu")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            install_packages
            ;;
        1)
            downgrade_packages
            ;;
        *)
            config_options
            ;;
    esac

}

# Install Packages
install_packages() {
    echo "Not implemented"
}

# Install Packages from Archive
downgrade_packages() {
    echo "Not implemented"
}

################################################################
# Performance & Features

# Performance & Features Main Menu
performance_features() {
    title "Arch Rock Configuration Utility - Performance & Features"
    options=("SoC Performance Profile - Available options are performance, ondemand and powersave")
    options+=("PWM Fan Control - Configure PWM Fan-control service")
    options+=("Overclocking - Configure rk3588-unlock-opps overlay which increases CPU supply & CPU VDD supply")
    options+=("Overlay - Configure Device Tree Overlay")
    options+=("Return to Main Menu")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            soc_profile
            ;;
        1)
            fan_control
            ;;
        2)
            overclocking
            ;;
        3)
            overlays
            ;;
        *)
            config_options
            ;;
    esac

}

# SoC Performance Profile
soc_profile() {
    echo "Not implemented"
    echo performance | sudo tee /sys/bus/cpu/devices/cpu[046]/cpufreq/scaling_governor /sys/class/devfreq/dmc/governor /sys/class/devfreq/fb000000.gpu/governor
    echo ondemand | sudo tee /sys/bus/cpu/devices/cpu[046]/cpufreq/scaling_governor && echo dmc_ondemand | sudo tee /sys/class/devfreq/dmc/governor && echo simple_ondemand | sudo tee /sys/class/devfreq/fb000000.gpu/governor
    echo powersave | sudo tee /sys/bus/cpu/devices/cpu[046]/cpufreq/scaling_governor /sys/class/devfreq/dmc/governor /sys/class/devfreq/fb000000.gpu/governor
}

# PWM Fan Control
fan_control() {
    echo "Not implemented"

    if ! [ -x "$(command -v dpkg)" ]; then
        sudo pacman -Sy dpkg --noconfirm
    fi

    git clone https://github.com/lukaszsobala/fan-control-rock5b.git
    cd fan-control-rock5b
    make package
    sudo dpkg -i fan-control*.deb
    sudo systemctl enable fan-control
    systemctl start fan-control

}

# Overclocking
overclocking() {
    echo "Not implemented"
}

# Device Tree Overlay
overlays() {
    echo "Not implemented"
}

################################################################
# User & Localization

# User & Localization Main Menu
user_localization() {
    title "Arch Rock Configuration Utility - User & Localization"
    options=("Manage User - Add, Remove and Change User Account Settings")
    options+=("Locale - Generate Locale Settings")
    options+=("Fonts - Install Fonts, TTF, Non-English Characters, Special Characters / Emoji")
    options+=("Time - Change Time Zone, Current Date and Time")
    options+=("Keyboard Layout - Change Keyboard Layout")
    options+=("WiFi Country - Change WiFi Country Settings")
    options+=("Return to Main Menu")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            manage_user
            ;;
        1)
            locale
            ;;
        2)
            fonts
            ;;
        3)
            timezone
            ;;
        4)
            wifi_country
            ;;
        *)
            config_options
            ;;
    esac

}

disable_sudopw() {
    #%wheel ALL=(ALL) NOPASSWD: ALL'
    echo ""
}

################################################################
# Main Program

# Read arguments
if [ "$1" = "--run-only" ]; then
    # This argument skip the below options / arguments, equivalent to `else`.
    check_util_updates
    config_options
elif [ ! -e "/usr/bin/arch-rock-config" ]; then
    update_util --install
elif [ "$1" = "install-kernel" ]; then
    install_kernel
elif [ "$1" = "post-install" ]; then
    post_install
elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "Usage : To be written"
    exit 1
else
    check_util_updates
    config_options
fi

