#!/bin/bash

################################################################
#                                                              #
#                Arch Rock Configuration Utility               #
#                                                              #
################################################################
# This is like armbian-config or raspi-config or rsetup but for Arch Linux running on Rock 5B / RK3588
################################################################
# Define variables

# Version of this script 
# (For developer : Update whenever there is a change in this file or its related files)
# format of Version Number is YYMMDDN which N is 1 unless there is more than one update on the same day)
utilver=2308182

# Define main / dev branch
branch=dev

# Initialize variables
update_available=false

################################################################
# Tools for formatting / styling

# Define terminal color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[1;34m'
NC='\033[0m' # No Color

# Option Picker
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# Echo with colors
colorecho() {
    color="$1"
    text="$2"
    echo -e "${color}${text}${NC}"
}

# Title / Heading
title() {
  clear
  text="$1"
  echo "---------------------------------------------------------------------"
  colorecho "$BLUE" "${text}"
  echo "---------------------------------------------------------------------"
}

################################################################
# Version updates handling

# Check updates
check_util_updates() {
    remote_utilver=$(curl -s "https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/arch-rock-config" | grep -o 'utilver=[0-9]*' | cut -d= -f2)
    if [ "$remote_utilver" -gt "$utilver" ]; then
        update_available=true
    fi
}

# Install / Update Utility to PATH
update_util() {
    if [ "$update_available" = true ] || [ "$1" = "--install" ]; then 
        title "Arch Rock Configuration Utility"
        colorecho "$GREEN" "Installing / Updating Arch Rock Configuration Utility ..."
        if ! [ -x "$(command -v wget)" ]; then
            sudo pacman -Sy wget --noconfirm
        fi

        sudo rm -rf /usr/bin/arch-rock-config
        sudo wget -N -P /usr/bin/ https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/arch-rock-config
        sudo chmod +x /usr/bin/arch-rock-config
        arch-rock-config
    fi
}

################################################################
# Utility Main Menu

config_options() {
    title "Arch Rock Configuration Utility"
    options=("System Maintenance - Managing Updates, Bootloader, System, Linux Kernel, etc.")
    options+=("Manage Packages - Install, Update or Downgrade Software Packages.")
    options+=("Performance & Features - Tweak SoC Performance Settings, Enable PWM Fan, Overclocking, etc.")
    options+=("User & Localization - Manage user accounts, Generating Locale, changing Timezone, etc.")

    if [ "$update_available" = true ]; then 
        options+=("Update Configuration Utility to latest version $GREEN(Updates available)$NC")
    fi
    
    options+=("Exit Configuration Utility")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            system_maintenance
            ;;
        1)
            manage_packages
            ;;
        2)
            performance_features
            ;;
        3)
            user_localization
            ;;
        4)
            update_util
            ;;
        *)
            exit 1
            ;;
    esac

}

################################################################
# System Maintenance

# System Maintenance Main Menu
system_maintenance() {
    title "Arch Rock Configuration Utility - System Maintenance"
    options=("System Update - Check & Perform Selective / Full System Upgrade")
    options+=("Update SPI Bootloader - Flash Latest Radxa U-Boot")
    options+=("Re-install Kernel - Re-install / Replace Linux Kernel")
    options+=("Move Arch Linux - Copy Arch Linux to another disk.")
    options+=("Return to Main Menu")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            system_update
            ;;
        1)
            flash_uboot
            ;;
        2)
            install_kernel
            ;;
        3)
            move_system
            ;;
        *)
            config_options
            ;;
    esac

}

# System Update
system_update() {
    sudo pacman -Syyu
}

# Update SPI Bootloader
flash_uboot() {
    colorecho "$GREEN" "Installing bootloader to the SPI NOR flash ..."

    curl -LJO https://dl.radxa.com/rock5/sw/images/others/zero.img.gz

    if ! [ -x "$(command -v gzip)" ]; then
        sudo pacman -Sy gzip --noconfirm
    fi
    gzip -d zero.img.gz

    if [ -e /dev/mtdblock0 ]; then
        sudo dd if=zero.img of=/dev/mtdblock0
    else
        colorecho "$RED" "Error : SPI Flash not found"
    fi

    curl -LJO https://dl.radxa.com/rock5/sw/images/loader/rock-5b/release/rock-5b-spi-image-gbf47e81-20230607.img

    sudo dd if=spi-rock-5b-spi-image-gbf47e81-20230607.img of=/dev/mtdblock0
    sync

    colorecho "$GREEN" "Installed bootloader to the SPI NOR flash"
}

# Re-install Kernel
install_kernel() {
    /usr/bin/lib-arch-rock-config/install-kernel
}

# Move Arch Linux
move_system() {
    echo "Not implemented"
}

################################################################
# Manage Packages

# Manage Packages Main Menu
manage_packages() {
    title "Arch Rock Configuration Utility - Manage Packages"
    options=("Install / Update Packages - Install Basic Software / RK3588 Specified / Customized Packages")
    options+=("Downgrade Packages - Install / Downgrade any Arch Linux Packages from Archive")
    options+=("Return to Main Menu")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            install_packages
            ;;
        1)
            downgrade_packages
            ;;
        *)
            config_options
            ;;
    esac

}

# Install Packages
install_packages() {
    echo "Not implemented"
}

# Install Packages from Archive
downgrade_packages() {
    echo "Not implemented"
}

################################################################
# Performance & Features

# Performance & Features Main Menu
performance_features() {
    title "Arch Rock Configuration Utility - Performance & Features"
    options=("SoC Performance Profile - Available options are performance, ondemand and powersave")
    options+=("PWM Fan Control - Configure PWM Fan-control service")
    options+=("Overclocking - Configure rk3588-unlock-opps overlay which increases CPU supply & CPU VDD supply")
    options+=("Overlay - Configure Device Tree Overlay")
    options+=("Return to Main Menu")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            soc_profile
            ;;
        1)
            fan_control
            ;;
        2)
            overclocking
            ;;
        3)
            overlays
            ;;
        *)
            config_options
            ;;
    esac

}

# SoC Performance Profile
soc_profile() {
    echo "Not implemented"
    echo performance | sudo tee /sys/bus/cpu/devices/cpu[046]/cpufreq/scaling_governor /sys/class/devfreq/dmc/governor /sys/class/devfreq/fb000000.gpu/governor
    echo ondemand | sudo tee /sys/bus/cpu/devices/cpu[046]/cpufreq/scaling_governor && echo dmc_ondemand | sudo tee /sys/class/devfreq/dmc/governor && echo simple_ondemand | sudo tee /sys/class/devfreq/fb000000.gpu/governor
    echo powersave | sudo tee /sys/bus/cpu/devices/cpu[046]/cpufreq/scaling_governor /sys/class/devfreq/dmc/governor /sys/class/devfreq/fb000000.gpu/governor
}

# PWM Fan Control
fan_control() {
    echo "Not implemented"

    if ! [ -x "$(command -v dpkg)" ]; then
        sudo pacman -Sy dpkg --noconfirm
    fi

    git clone https://github.com/lukaszsobala/fan-control-rock5b.git
    cd fan-control-rock5b
    make package
    sudo dpkg -i fan-control*.deb
    sudo systemctl enable fan-control
    systemctl start fan-control

}

# Overclocking
overclocking() {
    echo "Not implemented"
}

# Device Tree Overlay
overlays() {
    echo "Not implemented"
}

################################################################
# User & Localization

# User & Localization Main Menu
user_localization() {
    title "Arch Rock Configuration Utility - User & Localization"
    options=("Manage User - Add, Remove and Change User Account Settings")
    options+=("Locale - Generate Locale Settings")
    options+=("Fonts - Install Fonts, TTF, Non-English Characters, Special Characters / Emoji")
    options+=("Time - Change Time Zone, Current Date and Time")
    options+=("Keyboard Layout - Change Keyboard Layout")
    options+=("WiFi Country - Change WiFi Country Settings")
    options+=("Return to Main Menu")
    select_option "${options[@]}"
    choice=$?

    # Choice
    case $choice in
        0)
            manage_user
            ;;
        1)
            locale
            ;;
        2)
            fonts
            ;;
        3)
            timezone
            ;;
        4)
            wifi_country
            ;;
        *)
            config_options
            ;;
    esac

}

disable_sudopw() {
    #%wheel ALL=(ALL) NOPASSWD: ALL'
    echo ""
}

################################################################
# Main Program

# Read arguments
if [ "$1" = "--run-only" ]; then
    # This argument skip the below options / arguments, equivalent to `else`.
    check_util_updates
    config_options
elif [ ! -e "/usr/bin/arch-rock-config" ]; then
    update_util --install
elif [ "$1" = "install-kernel" ]; then
    install_kernel
elif [ "$1" = "post-install" ]; then
    post_install
elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "Usage : To be written"
    exit 1
else
    check_util_updates
    config_options
fi

################################################################