#!/bin/bash

#################################################################
#                    _     _      _                             #
#     /\            | |   | |    (_)                            #
#    /  \   _ __ ___| |__ | |     _ _ __  _   ___  __           #
#   / /\ \ | '__/ __| '_ \| |    | | '_ \| | | \ \/ /           #
#  / ____ \| | | (__| | | | |____| | | | | |_| |>  <            #
# /_/    \_\_|  \___|_| |_|______|_|_| |_|\__,_/_/\_\ __        #
#  _____           _        _ _           (  __)/  \(  _ \      #
# |_   _|         | |      | | |           ) _)(  O ))   /      #
#   | |  _ __  ___| |_ __ _| | | ___ _ __ (__)  \__/(__\_)      #
#   | | | '_ \/ __| __/ _` | | |/ _ \ '__|    /__\ (  _ \( \/ ) #
#  _| |_| | | \__ \ || (_| | | |  __/ |      /    \ )   // \/ \ #
# |_____|_| |_|___/\__\__,_|_|_|\___|_|      \_/\_/(__\_)\_)(_/ #
#                                                               #
#################################################################
# Version of this script 
# (For developer : Update whenever there is a change in this file or its related files)
# format of Version Number is YYMMDDN which N is 1-9 count on updates commited on the same day)
installerver=2403092

# Define main / dev branch
branch=main

# Target Device for Installation
install_target="rock5"

################################################################
# Compiled Packages folder path
compiled_pkg_folder="/usr/lib/compiled-packages"

# Pacman ParallelDownloads
prldownloads=30

# Language options
langopt=("Chinese" "English" "Spanish" "French" "German" "Arabic" "Others")

# Chinese
langchi=("cmn_TW (Taiwan)" "zh_CN (China)" "zh_HK (Hong Kong)" "zh_TW (Taiwan)" "zh_MO (Macau)" "zh_SG (Singapore)"  "zu_ZA (South Africa)" "yue_HK (Hong Kong)" "hak_TW (Taiwan)")

# English
langeng=("en_AG (Antigua and Barbuda)" "en_AU (Australia)" "en_BW (Botswana)" "en_CA (Canada)" "en_DK (Denmark)" "en_GB (United Kingdom)" "en_HK (Hong Kong)" "en_IE (Ireland)" "en_IL (Israel)" "en_IN (India)" "en_NG (Nigeria)" "en_NZ (New Zealand)" "en_PH (Philippines)" "en_SC (Seychelles)" "en_SG (Singapore)" "en_US (United States)" "en_ZA (South Africa)" "en_ZM (Zambia)" "en_ZW (Zimbabwe)")

# Spanish
langspa=("es_AR (Argentina)" "es_BO (Bolivia)" "es_CL (Chile)" "es_CO (Colombia)" "es_CR (Costa Rica)" "es_CU (Cuba)" "es_DO (Dominican Republic)" "es_EC (Ecuador)" "es_ES (Spain)" "es_GT (Guatemala)" "es_HN (Honduras)" "es_MX (Mexico)" "es_NI (Nicaragua)" "es_PA (Panama)" "es_PE (Peru)" "es_PR (Puerto Rico)" "es_PY (Paraguay)" "es_SV (El Salvador)" "es_US (United States)" "es_UY (Uruguay)" "es_VE (Venezuela)")

# French
langfre=("fr_BE (Belgium)" "fr_CA (Canada)" "fr_CH (Switzerland)" "fr_FR (France)" "fr_LU (Luxembourg)")

# German
langger=("de_AT (Austria)" "de_BE (Belgium)" "de_CH (Switzerland)" "de_DE (Germany)" "de_IT (Italy)" "de_LI (Liechtenstein)" "de_LU (Luxembourg)")

# Arabic
langara=("ar_AE (United Arab Emirates)" "ar_BH (Bahrain)" "ar_DZ (Algeria)" "ar_EG (Egypt)" "ar_IN (India)" "ar_IQ (Iraq)" "ar_JO (Jordan)" "ar_KW (Kuwait)" "ar_LB (Lebanon)" "ar_LY (Libya)" "ar_MA (Morocco)" "ar_OM (Oman)" "ar_QA (Qatar)" "ar_SA (Saudi Arabia)" "ar_SD (Sudan)" "ar_SS (South Sudan)" "ar_SY (Syria)" "ar_TN (Tunisia)" "ar_YE (Yemen)")

# Sort by Continent
langcon=("Asia" "Europe" "Americas" "Africa" "Others")

# Asia
langconas=("az_AZ (Azerbaijan)" "az_IR (Iran)" "as_IN (India)" "bhb_IN (India)" "bho_IN (India)" "bho_NP (Nepal)" "bo_CN (China)" "bo_IN (India)" "dz_BT (Bhutan)" "fa_IR (Iran)" "hi_IN (India)" "he_IL (Israel)" "id_ID (Indonesia)" "ja_JP (Japan)" "ka_GE (Georgia)" "kk_KZ (Kazakhstan)" "km_KH (Cambodia)" "kn_IN (India)" "ko_KR (Korea)" "th_TH (Thailand)" "ta_SG (Singapore)" "vi_VN (Vietnam)" "saq_KE (Kenya)" "ml_IN (India)" "ug_CN (China)" "or_IN (India)" "sw_KE (Kenya)" "ta_MY (Malaysia)" "ta_IN (India)" "brx_IN (India)" "pa_IN (India)" "ug_IR (Iran)" "pa_PK (Pakistan)" "ur_PK (Pakistan)")

# Europe
langconeu=("bg_BG (Bulgaria)" "ca_IT (Italy)" "ca_AD (Andorra)" "ca_ES (Spain)" "ast_ES (Spain)" "ca_FR (France)" "br_FR (France)" "oc_FR (France)" "cs_CZ (Czech Republic)" "csb_PL (Poland)" "da_DK (Denmark)" "dsb_DE (Germany)" "el_GR (Greece)" "el_CY (Cyprus)" "et_EE (Estonia)" "eu_ES (Spain)" "fi_FI (Finland)" "fur_IT (Italy)" "fy_NL (Netherlands)" "fy_DE (Germany)" "ga_IE (Ireland)" "gl_ES (Spain)" "hr_HR (Croatia)" "hsb_DE (Germany)" "ia_FR (France)" "is_IS (Iceland)" "it_CH (Switzerland)" "it_IT (Italy)" "lv_LV (Latvia)" "mk_MK (North Macedonia)" "mt_MT (Malta)" "nb_NO (Norway)" "nl_BE (Belgium)" "nl_NL (Netherlands)" "nn_NO (Norway)" "no_NO (Norway)" "pl_PL (Poland)" "pt_PT (Portugal)" "ro_RO (Romania)" "sk_SK (Slovakia)" "sl_SI (Slovenia)" "sq_AL (Albania)" "sv_FI (Finland)" "sv_SE (Sweden)" "tr_TR (Turkey)" "uk_UA (Ukraine)" "crh_UA (Ukraine)" "gd_GB (United Kingdom)" "gv_GB (United Kingdom)" "cy_GB (United Kingdom)" "se_NO (Norway)")

# Americas
langconam=("ayc_PE (Peru)" "qu_PE (Peru)" "chr_US (United States)" "iu_CA (Canada)" "pt_BR (Brazil)" "hif_FJ (Fiji)" "ik_CA (Canada)")

# Africa
langconaf=("aa_DJ (Djibouti)" "aa_ER (Eritrea)" "aa_ET (Ethiopia)" "ber_DZ (Algeria)" "ber_MA (Morocco)" "gez_ER (Eritrea)" "gez_ET (Ethiopia)" "am_ET (Ethiopia)" "kab_DZ (Algeria)" "sid_ET (Ethiopia)" "sn_ZW (Zimbabwe)" "so_SO (Somalia)" "shi_MA (Morocco)" "shi_Tfng_MA (Morocco)" "rw_RW (Rwanda)" "nso_ZA (South Africa)" "yo_NG (Nigeria)" "xog_UG (Uganda)")

# Others
langconother=("ru_RU (Russia)" "cv_RU (Russia)" "ta_LK (Sri Lanka)" "ak_GH (Ghana)" "si_LK (Sri Lanka)" "dv_MV (Maldives)" "uz_UZ (Uzbekistan)" "sr_RS (Serbia)" "tk_TM (Turkmenistan)" "bi_VU (Vanuatu)" "sw_TZ (Tanzania)" "ce_RU (Russia)" "sah_RU (Russia)" "sr_CS (Serbia and Montenegro)" "tg_TJ (Tajikistan)" "ps_AF (Afghanistan)" "me_ME (Montenegro)" "ckb_IQ (Iraq)" "be_BY (Belarus)" "kl_GL (Greenland)" "bs_BA (Bosnia and Herzegovina)" "ug_UZ (Uzbekistan)")

################################################################
# Tools for formatting / styling

# Define terminal color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# Option Picker
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# Echo with colors
colorecho() {
    color="$1"
    text="$2"
    echo -e "${color}${text}${NC}"
}

# Title / Heading
title() {
  clear
  echo "---------------------------------------------------------------------"
  colorecho "$BLUE" "                    _     _      _                  "
  colorecho "$BLUE" "     /\            | |   | |    (_)                 "
  colorecho "$BLUE" "    /  \   _ __ ___| |__ | |     _ _ __  _   ___  __"
  colorecho "$BLUE" "   / /\ \ | '__/ __| '_ \| |    | | '_ \| | | \ \/ /"
  colorecho "$BLUE" "  / ____ \| | | (__| | | | |____| | | | | |_| |>  < "
  colorecho "$BLUE" " /_/    \_\_|  \___|_| |_|______|_|_| |_|\__,_/_/\_\ __"
  colorecho "$BLUE" "  _____           _        _ _           (  __)/  \(  _ \  "
  colorecho "$BLUE" " |_   _|         | |      | | |           ) _)(  O ))   /  "
  colorecho "$BLUE" "   | |  _ __  ___| |_ __ _| | | ___ _ __ (__)  \__/(__\_)"
  colorecho "$BLUE" "   | | | '_ \/ __| __/ _\` | | |/ _ \ '__|    /__\ (  _ \( \/ )"
  colorecho "$BLUE" "  _| |_| | | \__ \ || (_| | | |  __/ |      /    \ )   // \/ \ "
  colorecho "$BLUE" " |_____|_| |_|___/\__\__,_|_|_|\___|_|      \_/\_/(__\_)\_)(_/"
  echo "---------------------------------------------------------------------"
  if [ -n "$1" ]; then
    text="$1"
    colorecho "$BLUE" "${text}"
    echo "---------------------------------------------------------------------"
  fi
  if [ "$branch" = "dev" ]; then
    colorecho "$YELLOW" "You are running a development build installer. It is experimental and may not work properly."
  fi
}

################################################################
# Internet Connection Check
check_internet() {
    servers=("google.com" "1.1.1.1" "114.114.114.114") # ping Google, Cloudflare and China Mobile DNS (for China users)
    #servers=("invalid.example") # debug test case: simulate no internet 
    #servers=("0.0.0.0") # debug test case: bypass internet
    internet_available=false
        for server in "${servers[@]}"; do
            if ping -q -c 3 "$server" >/dev/null 2>&1; then
                colorecho "$GREEN" "\n Internet is available via $server."
                internet_available=true

                return 0
            else
                return -1
            fi
        done
}

network_option() {
    colorecho "$GREEN" "Network Option:"

    # Check if there is a Wireless Interface and get the first one
    for dev in /sys/class/net/*; do
        if [ -e "$dev"/wireless ]; then
            iwdev=${dev##*/};
            break;
        fi
    done
    # Check one more time since driver maybe not yet loaded
    if [ -z "$iwdev" ]; then
        sleep 3
        for dev in /sys/class/net/*; do
            if [ -e "$dev"/wireless ]; then
                iwdev=${dev##*/};
                break;
            fi
        done
    fi

    if [ -z "$iwdev" ]; then
        echo "Press 'w' to connect to a WiFi network (No wireless interface found)"
    else
        echo "Press 'w' to connect to a WiFi network ($iwdev)"
    fi

    echo "Press 's' to skip internet Check (installation may fail)"
    if [ -x "$(command -v sudo)" ]; then
        echo "Press 'p' to configure pacman ParallelDownloads (current value: $prldownloads)"
    fi
    colorecho "$YELLOW" "Waiting for internet connection..."

    # Set terminal to non-blocking mode to read single keypress
    stty -echo raw

    # Initialize variables
    keypress=''
    last_check=$(date +%s)

    while [ "$keypress" = '' ]; do
        # Check if it's time to perform internet check
        current_time=$(date +%s)
        if [ $((current_time - last_check)) -ge 3 ]; then
            # Check internet connectivity in the background
            if check_internet; then
                netsus=1
                break
            fi
            last_check=$current_time
        fi

        # Read single keypress with timeout
        read -t 0.1 -n 1 keypress
    done

    # Restore terminal settings
    stty echo -raw

    case $keypress in
        [wW])
            echo "Connecting to a WiFi network..."
            if [ -z "$iwdev" ]; then
                read -p "Please specify the network device (e.g. wlan0): " iwdev
            fi
            if [ -x "$(command -v sudo)" ]; then
                sudo wifi-menu $iwdev
            else
                wifi-menu $iwdev
            fi               
             # NTP Sync for WiFi
                if ip link show | grep "state UP" | grep -q "wl" >/dev/null 2>&1; then
                    colorecho "$GREEN" "Updating NTP Time Sync ..."
                    if [ -x "$(command -v sudo)" ]; then
                        sudo rm -rf /etc/systemd/network/*
                        sudo systemctl restart systemd-networkd
                        sleep 1
                        sudo timedatectl set-ntp false
                        sudo timedatectl set-ntp true
                    else
                        rm -rf /etc/systemd/network/*
                        systemctl restart systemd-networkd
                        sleep 1
                        timedatectl set-ntp false
                        timedatectl set-ntp true
                    fi
                fi
            
            ;;
        [pP])
            if [ -x "$(command -v sudo)" ]; then
                read -p "Enter a value to set pacman ParallelDownloads to (current value: $prldownloads): " prldownloads
                network_option
            else
                echo "Invalid choice."
                network_option
            fi
            ;;
        [sS])
            echo "Skipping internet Check"
            ;;
        *)
            if [ -z "$netsus" ]; then
                echo "Invalid choice."
                network_option
            fi
            ;;
    esac
}

# Check Installer Updates
check_installer_updates() {
    colorecho "$YELLOW" "Checking for installer updates..."
    remote_installerver=$(curl -s "https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/arch-rock-installer" | grep -o 'installerver=[0-9]*' | cut -d= -f2)
    if [ "$remote_installerver" -gt "$installerver" ]; then
        colorecho "$GREEN" "A newer version ($remote_installerver) of this installer is available, do you want to update this installer?"
        options=("Update this Installer" "Do not update this installer")
        select_option "${options[@]}"
        answer=$?
        if [ "$answer" = 0 ]; then
            # Download Installer
            colorecho "$GREEN" "Downloading Installer ..."
            curl -LJO https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/arch-rock-installer

            # Update arch-rock-installer
            colorecho "$GREEN" "Updating Installer ..."
            # Check if the script is being run with root privileges
            if [ $(id -u) -eq 0 ]; then
                # If running as root
                sed -i "s/install_target=\"rock5\"/install_target=\"$install_target\"/g" arch-rock-installer
                chmod +x arch-rock-installer
                cp -r arch-rock-installer /usr/bin/installer
                rm -rf arch-rock-installer
                colorecho "$GREEN" "Installer updated. System will reboot now."
                if ! reboot --force; then
                    echo "Unable to reboot automatically, please reboot your device manually."
                fi
            else
                # If not running as root
                sudo sed -i "s/install_target=\"rock5\"/install_target=\"$install_target\"/g" arch-rock-installer
                sudo chmod +x arch-rock-installer
                sudo cp -r arch-rock-installer /usr/bin/installer
                sudo rm -rf arch-rock-installer
                colorecho "$GREEN" "Installer updated. System will reboot now."
                if ! sudo reboot; then
                    echo "Unable to reboot automatically, please reboot your device manually."
                fi
            fi
        fi
    fi
}

add_boot_part_fstab() {
    title "Updating fstab ..."
    boot_partition=$(fdisk -l "$rootfs_disk" | grep "$rootfs_disk" | awk 'NR==2{print $1}')

    # Check if the boot_partition is not empty
    if [ -z "$boot_partition" ]; then
        echo "Unable to determine boot partition on $rootfs_disk"
        exit 1
    fi

    # Add the line to /etc/fstab
    new_line="$boot_partition /boot vfat dmask=000,fmask=0111,user 0 0"

    # Check if the line already exists in /etc/fstab
    if grep -qF "/boot vfat dmask=000,fmask=0111,user 0 0" /etc/fstab; then
        echo "boot partition seems already configured in /etc/fstab to manage by system."
    else
        # Add the line to /etc/fstab
        echo "$new_line" >> /etc/fstab
        # Check if the addition was successful
        if [ $? -eq 0 ]; then
            cat /etc/fstab
            echo "Line added to /etc/fstab successfully"
        else
            echo "Error adding line to /etc/fstab"
        fi
    fi
}

################################################################
# Initial System Setup

init_setup() {

    title
    colorecho "$GREEN" "Running Initial System Setup ..."

    # Check if the script is being run with root privileges
    if [[ $EUID -ne 0 ]]; then
        colorecho "$RED" "Error : Initial System Setup must be run as root"
        exit 1
    fi

    # Get rootfs partition from the current mount point "/"
    rootfs_partition=$(mount | grep "on / " | awk '{print $1}')

    # Get disk path using rootfs partition path
    rootfs_disk=$(echo "$rootfs_partition" | sed 's/[0-9]*$//')
    rootfs_disk="${rootfs_disk%p*}"

    if [ ! -e "/boot/extlinux/extlinux.conf" ]; then 
        add_boot_part_fstab
    fi

    colorecho "$GREEN" "Resizing File System ..."
    growpart $rootfs_disk 2
    resize2fs $rootfs_partition

    # Allow wheel group in sudoers
    colorecho "$GREEN" "Allowing wheel group in sudoers ..."
    echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers
    usermod -aG wheel root

    # Loop until curl is successful or max attempts reached
    attempt=0
    until curl -sSf https://raw.githubusercontent.com/ >/dev/null 2>&1 || [ "$attempt" -ge 5 ]; do
        colorecho "$RED" "Establishing SSL internet connection ..."
        sleep 3
        ((attempt++))
    done

    if [ "$attempt" -ge 5 ]; then
        systemctl status systemd-timesyncd # for debugging
        colorecho "$RED" "Failed to establish SSL internet connection after $attempt attempts."
        colorecho "$YELLOW" "Restart your device and try again or press Ctrl+C to exit this installer for manual operation."
        options=("Continue Anyway (may break)" "Restart Now")
        select_option "${options[@]}"
        answer=$?
        if [ "$answer" = 1 ]; then
            colorecho "$GREEN" "System will reboot now."
            if ! reboot --force; then
                echo "Unable to reboot automatically, please reboot your device manually."
            fi
        fi
    fi

    # Initialize the pacman keyring and populate the Arch Linux ARM package signing keys
    colorecho "$GREEN" "Setting up pacman ..."
    pacman-key --init
    pacman-key --populate archlinuxarm

    colorecho "$GREEN" "Installing sudo ..."
    pacman -Sy sudo --noconfirm

    # Download and install arch-rock-config
    attempt=0
    until [ -f /usr/bin/arch-rock-config ] || [ "$attempt" -ge 5 ]; do
        colorecho "$GREEN" "Installing Configuration Utility (arch-rock-config) ..."
        sleep 3
        cd /usr/bin
        curl -LJO https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/arch-rock-config
        ((attempt++))
    done
    chmod +x arch-rock-config

    ################################################################
    # User Account

    # Prompt user to enter a new username
    title "Create User Account"

    colorecho "$GREEN" "Removing default account ..."
    arch-rock-config user remove alarm

    title "Create User Account"
    read -p "Enter a new username (default=rock): " new_username

    # Check if the username is not empty
    if [ -z "$new_username" ]; then
        new_username="rock"
    fi

    arch-rock-config user add $new_username
    arch-rock-config user manage $new_username sudopw

    hostname=$(hostnamectl --static)
    echo "$new_username $hostname =NOPASSWD: /usr/bin/systemctl poweroff,/usr/bin/systemctl halt,/usr/bin/systemctl reboot" | tee -a "/etc/sudoers" >/dev/null

    # Prompt user to change the root password
    title "Root account options"
    colorecho "$GREEN" "Do you want to keep the root account and change the root password?"
    options=("Turn off root account (recommended)" "Change root password" "Do not change root password")
    select_option "${options[@]}"
    answer=$?

    if [ "$answer" = 1 ]; then
        colorecho "$GREEN" "Set new root password : "
        passwd
    elif [ "$answer" = 0 ]; then
        passwd -l root
    fi

    if [ -e "/etc/systemd/system/init-setup.service" ]; then 
        systemctl disable init-setup.service
        rm -rf /etc/systemd/system/init-setup.service
    fi

    mkdir -p /etc/systemd/system/getty@tty1.service.d
    echo -e "[Service]\nExecStart=\nExecStart=-/sbin/agetty -o '-p -f -- \\u' --noclear --autologin $new_username %I \$TERM" | tee /etc/systemd/system/getty@tty1.service.d/autologin.conf
    echo "installer" | tee -a /home/$new_username/.bashrc

    colorecho "$GREEN" "System will reboot now."
    if ! reboot --force; then
        echo "Unable to reboot automatically, please reboot your device manually."
    fi 
}

################################################################
# About this Installer

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    colorecho "$BLUE" "Arch Linux Installer for ARM (Aarch64)"
    echo "Usage: arch-rock-installer / installer <optional_argument>"

    colorecho "$GREEN" "Options"
    echo "-h / --help : Usage and Infomation of this installer"
    echo "--skip-init-setup : Skip init setup (use only if the corresponding setup has been done)"
    exit 1
elif [ "$1" = "--create-init-setup-service" ]; then
    echo -e "[Unit]\nDescription=Initial System Setup\nAfter=network.target\nBefore=sshd.service systemd-logind.service getty@tty1.service\n\n[Service]\nType=oneshot\nTTYPath=/dev/tty13\nExecStartPre=/usr/bin/chvt 13\nExecStart=/usr/bin/installer\nExecStartPost=/usr/bin/chvt 1\nTimeoutStartSec=0\nStandardInput=tty\nTTYVHangup=yes\nTTYVTDisallocate=yes\n\n[Install]\nWantedBy=default.target\nRequiredBy=sshd.service systemd-logind.service getty@tty1.service" | tee /etc/systemd/system/init-setup.service && systemctl enable init-setup.service
    exit 1
fi

################################################################
# Installer Setup

title

# Pre-init : install compiled packages
if [ -e $compiled_pkg_folder ]; then 
    if [ ! "$1" = "--skip-install-pkg" ]; then
        colorecho "$GREEN" "Installing Required Packages ..."
        if yes y | pacman -U $compiled_pkg_folder/*.pkg.tar.* --needed; then

            echo "Removing packages archives ..."
            rm -rf $compiled_pkg_folder

            # Ensure SSL (Sync Clock)
            colorecho "$GREEN" "Enabling Time Sync ..."
            systemctl enable systemd-timesyncd

            colorecho "$GREEN" "System will reboot now."
            if ! reboot --force; then
                echo "Unable to reboot automatically, please reboot your device manually."
            fi 
        else
            colorecho "$RED" "Failed to install Required Packages. The image may be broken, try flashing the image again."
            sleep 5
            exit 1
        fi
    fi
fi

# Network option menu
network_option
# Check Updates
check_installer_updates
# Run init setup if not yet done
if [ ! -e "/usr/bin/arch-rock-config" ]; then 
    if [ ! "$1" = "--skip-init-setup" ]; then
        init_setup
    fi
fi

# Check if the script is being run with root privileges
if [[ $EUID -ne 0 ]]; then
    title
    colorecho "$GREEN" "Starting Setup ..."
else
    colorecho "$RED" "Error : Installer must be run as user"
    exit 1
fi

################################################################
# Time Zone

    # Full Language Choice Menu
    langchoicemenu() {
        title "Language (More Options)"
        select_option "${langopt[@]}" "Skip setting Language"
        choice=$?
        if [ "$choice" = 0 ]; then
            langchoice=("${langchi[@]}") # Chinese
        elif [ "$choice" = 1 ]; then
            langchoice=("${langeng[@]}") # English
        elif [ "$choice" = 2 ]; then
            langchoice=("${langspa[@]}") # Spanish
        elif [ "$choice" = 3 ]; then
            langchoice=("${langfre[@]}") # French
        elif [ "$choice" = 4 ]; then
            langchoice=("${langger[@]}") # German
        elif [ "$choice" = 5 ]; then
            langchoice=("${langara[@]}") # Arabic
        elif [ "$choice" = 6 ]; then
            title "Language (Others - sort by continents)"
            select_option "${langcon[@]}"
            choice=$?
            if [ "$choice" = 0 ]; then
                langchoice=("${langconas[@]}") # Asia
            elif [ "$choice" = 1 ]; then
                langchoice=("${langconeu[@]}") # Europe
            elif [ "$choice" = 2 ]; then
                langchoice=("${langconam[@]}") # Americas
            elif [ "$choice" = 3 ]; then
                langchoice=("${langconaf[@]}") # Africa
            elif [ "$choice" = 4 ]; then
                langchoice=("${langconother[@]}") # Others
            fi
        else
            return
        fi
        title "Language (More Options)"
        select_option "${langchoice[@]}"
        choice=$?
        title "Language Setup"
        read -p "Confirm setting language to ${langchoice[$choice]%% (*} ? [Y/n]:" langcfm
        if [[ $langcfm == [Yy]* ]]; then
            arch-rock-config locale generate "${langchoice[$choice]%% (*}" -y
        else
            langchoicemenu
            return
        fi
    }

    title "Language"

    lclist=$(arch-rock-config locale list-available)

    lapicount=0
    while [ $lapicount -lt 10 ]; do
        netlang=$(curl -s https://ipapi.co/languages)
        if echo "$netlang" | grep -q "RateLimited"; then
            echo "Error"
            sleep 1
            lapicount=$((lapicount + 1))
        else
            break  # Exit the loop if there's no error
        fi
    done

    network_lang=()
    IFS=',' read -ra network_lang <<< "$netlang"
    colorecho "$GREEN" "Let's begin with setting up your language, is that right?"
    colorecho "$GREEN" "Suggested Languages are:"
    echo
    options=()
    for ((i = 0; i < ${#network_lang[@]}-1; i++)); do
        options+=("${network_lang[$i]}")
    done
    sgdindx=$i
    options+=("More Languages" "Skip setting Language")
    select_option "${options[@]}"
    choice=$?

    if [ "$choice" = "$sgdindx" ]; then
        langchoicemenu
    elif [ "$choice" -ge "$sgdindx" ]; then
        echo "Skipping ..."
    else
        echo "Set Language to ${options[$choice]}"
        arch-rock-config locale generate "${options[$choice]}" -y
    fi

################################################################
# Time Zone

title "Time Zone"

    ntz=$(arch-rock-config time network-time-zone)
    colorecho "$GREEN" "Your time zone is: $ntz"
    colorecho "$GREEN" "Is that correct?"
    echo

    options=("Yes, this is correct" "No, let me correct my Time Zone" "Skip setting Time Zone")
    select_option "${options[@]}"
    choice=$?

    if [ "$choice" = 0 ]; then
        arch-rock-config "time" set-time-zone sync
    elif [ "$choice" = 1 ]; then
        arch-rock-config "time" set-time-zone
    fi

################################################################
# Select linux kernel
kernel_menu() {
    title "Linux Kernel"
    colorecho "$GREEN" "Select a linux kernel to install :"
    colorecho "$GREEN" "  Linux Kernel \t\t Repo \t\t Description \t\t\t Kernel Version"
    options=()

    # Kernel options for each install target
    # format: kernelpkg (repo) - Description (linux_kernel_version)
    # notes: put the recommended option at first line and mark (Recommended) in Description

    if [ "$install_target" = "rock5" ] || [ "$install_target" = "edge2" ] || [ "$install_target" = "orangepi5" ] || [ "$install_target" = "zero3" ] || [ "$install_target" = "rockchip" ]; then
        options+=("linux-aarch64-rockchip-bsp5.10-joshua (7Ji) - (Recommended) Install Joshua Linux Rockchip Kernel (Linux 5.10.160)")
    else
        options+=("linux-aarch64 (alarm) - Install Linux Mainline Kernel (Linux 6.x)")
    fi 
 
    if [ "$install_target" = "rock5" ]; then 
        options+=("linux-aarch64-rockchip-bsp5.10-radxa-git (7Ji) - Install Linux Radxa BSP Kernel (Linux 5.10.108)")
    fi 
 
    if [ "$install_target" = "orangepi5" ]; then
        options+=("linux-aarch64-rockchip-rk3588-bsp5.10-orangepi (7Ji) - (Recommended) Install AArch64 Rockchip vendor kernel (BSP5.10 for RK3588, OrangePi fork) (Linux 5.10.110)")
        options+=("linux-aarch64-rockchip-rk3588-bsp5.10-orangepi-git (7Ji) - Install AArch64 Rockchip vendor kernel (BSP5.10 for RK3588, OrangePi fork) (Linux 5.10.160)")
    fi 
 
    if [ "$branch" = "dev" ]; then 
        options+=("linux-aarch64-rockchip-bsp6.1-joshua-git (7Ji) - (Experimental) Install Joshua Linux Rockchip 6.1 Kernel (Linux 6.1.43)")
        #options+=("linux-rockchip-6-joshua-bin (acu) - (Experimental) Install Joshua Linux Rockchip Kernel (Linux 6.1.43)") 
        #options+=("linux-rockchip-joshua-bin (7Ji-PKGBUILDs) - (Experimental) Install Joshua Linux Rockchip Kernel (Linux 6.1.43)") 
        options+=("linux-joshua-git (7Ji) - Install Linux Mainline Kernel with patches for rk3588 devices with linux-git trunk of Joshua (Linux 6.7.0)")
        options+=("linux-aarch64-7ji (7Ji) - Install Linux Mainline Kernel with patches for Amlogic devices and RK3588 (Linux 6.x latest)")
        options+=("linux-aarch64 (7Ji) - Install Linux Mainline Kernel (This is actually from alarm repo) (Linux 6.x latest)")
    fi 

    options+=("(Others) Enter custom kernel options (Experimental)")
    select_option "${options[@]}"
    krl_options=$?
    selected_option="${options[$krl_options]}"
    kernelpkg=$(echo "$selected_option" | awk '{print $1}')
    pacmanrepo=$(echo "$selected_option" | awk '{print $2}' | tr -d '()')

    if [ "$kernelpkg" = "(Others)" ]; then
        options=("Install a kernel from pacman")
        options+=("Install a kernel from adrepo")
        options+=("Install a kernel from source (using AGR or AUR)")
        options+=("Return to the upper kernel menu")

        select_option "${options[@]}"
        compilepkggit=$?

        if [[ $compilepkggit = 0 ]]; then
            read -p "Enter a kernel to install from pacman (e.g. linux-aarch64): " kernelpkg
        elif [[ $compilepkggit = 1 ]]; then  
            read -p "Enter a kernel to install from adrepo (e.g. linux-radxa-rkbsp5-git): " kernelpkg
        elif [[ $compilepkggit = 2 ]]; then
            read -p "Enter the github repo for your PKGBUILD (e.g. 7Ji-PKGBUILDs/linux-rockchip-joshua-git): " kernelurl
            read -p "Enter the kernel PKGBASE name (e.g. linux-rockchip-joshua-git): " kernelpkg
        else
            #colorecho "$YELLOW" "Warning: No option is selected, kernel may not be installed."
            kernel_menu
            return
        fi
        read -p "Enter additional packages to install (e.g. linux-firmware-joshua-git or leave it blank): " firmwarepkg
        read -p "Do you want to add a pacman repo? [Y/n or 7Ji]: " addpacmanrepo
        if [[ $addpacmanrepo == [Yy]* ]]; then
            arch-rock-config add-repo
        elif [[ $addpacmanrepo != [Nn]* ]]; then
            arch-rock-config add-repo $addpacmanrepo
        fi
    fi
}
kernel_menu
################################################################
# Select desktop environment

title "Desktop Environment"
colorecho "$GREEN" "Select a desktop environment to install :"
echo
options=("Gnome (Full)" "Gnome (Minimal)" "KDE Plasma (Full)" "KDE Plasma (No KDE Apps)" "Budgie Desktop" "Sway" "Cutefish (Experimental)" "XFCE (Experimental)" "LXQt" "LXDE" "MATE" "Cinnamon")
options+=("Do not install a Desktop Environment")

select_option "${options[@]}"
de_options=$?

################################################################
# Installation begins here
title "Configuring Pacman"

    colorecho "$GREEN" "Enabling ParallelDownloads for pacman ..."
    sudo sed -i "s/^#ParallelDownloads\\s*=\\s*\\([0-9]\\{1,3\\}\\)\\?$/ParallelDownloads = $prldownloads/" /etc/pacman.conf

    if [[ -z $addpacmanrepo ]]; then
        echo "Adding $pacmanrepo ..."
        arch-rock-config add-repo $pacmanrepo
    fi

################################################################
# Install Linux Kernel

title "Installing Linux Kernel"

    oldkrlrel=$(uname -r)

    if [[ "$kernelpkg" != "linux-aarch64" ]]; then
        colorecho "$GREEN" "Removing linux-aarch64 ..."
        yes y|sudo pacman -R linux-aarch64
        sudo rm -rf /etc/mkinitcpio.d/*
    fi

    if [[ -z "$kernelurl" ]]; then
        if [[ $compilepkggit = 1 ]]; then
            colorecho "$GREEN" "Installing new kernel (adrepo) ..."
            echo -e "y"  | arch-rock-config install $kernelpkg
            sudo rm -rf /boot/dtbs/$oldkrlrel /lib/modules/$oldkrlrel
        elif sudo pacman -Ssy "$kernelpkg" &> /dev/null; then
            colorecho "$GREEN" "Installing new kernel ..."
            yes y|sudo pacman -S --overwrite \* $kernelpkg $kernelpkg-headers

            if sudo pacman -Qs $kernelpkg > /dev/null ; then
                colorecho "$GREEN" "Removing Old Kernel Modules ..."
                sudo rm -rf /boot/dtbs/$oldkrlrel /lib/modules/$oldkrlrel
            else
                sudo pacman -S --overwrite \* $kernelpkg $kernelpkg-headers
                if sudo pacman -Qs $kernelpkg > /dev/null ; then
                    colorecho "$GREEN" "Removing Old Kernel Modules ..."
                    sudo rm -rf /boot/dtbs/$oldkrlrel /lib/modules/$oldkrlrel
                else
                    colorecho "$RED" "Error: The required linux kernel package is not installed."
                    colorecho "$YELLOW" "Tip: Sometimes it happens when a pacman repo maintainence is in progress, please try again later."
                    colorecho "$RED" "Installation can not be continued, exiting ... (enter the command installer to start again)"
                    exit 1
                fi
            fi
        else
            colorecho "$RED" "Error: Package not found. Failed to Install Linux Kernel."
            colorecho "$RED" "Installation can not be continued, exiting ... (enter the command installer to start again)"
            exit 1
        fi
    else
        colorecho "$GREEN" "Compiling and Installing new kernel from GitHub repo ..."
        arch-rock-config install "gh://${kernelurl}"
        sudo rm -rf /boot/dtbs/$oldkrlrel /lib/modules/$oldkrlrel
        colorecho "$GREEN" "I will pause here 5 seconds for debugging, take a screenshot if you need."
        sleep 5
    fi

    colorecho "$GREEN" "Installing Linux Firmware ..." 
    if [[ "$kernelpkg" == *"-orangepi"* ]]; then
        yes y|sudo pacman -S linux-firmware-orangepi-git mali-valhall-g610-firmware
    elif [[ "$kernelpkg" == *"-radxa"* ]]; then
        colorecho "$GREEN" "Removing linux-firmware-joshua-git ..."
        yes y|sudo pacman -R linux-firmware-joshua-git
        colorecho "$GREEN" "Installing DKMS Packages ..."
        arch-rock-config install "8852bu-dkms-git" "8852be-dkms-git"
    elif [[ "$kernelpkg" == *"-joshua"* ]]; then
        yes y|sudo pacman -S linux-firmware-joshua-git mali-valhall-g610-firmware
    elif [ "$install_target" = "rock5" ] || [ "$install_target" = "edge2" ] || [ "$install_target" = "orangepi5" ] || [ "$install_target" = "zero3" ] || [ "$install_target" = "rockchip" ]; then
        yes y|sudo pacman -S linux-firmware-joshua-git mali-valhall-g610-firmware
    else
        yes y|sudo pacman -S $firmwarepkg
    fi

    # Update extlinux.conf
    colorecho "$YELLOW" "Generating extlinux.conf ..."

    if sudo test -e  "/boot/extlinux/extlinux.arch.template"; then 
        colorecho "$YELLOW" "Using extlinux.arch.template ..."
        sudo mv /boot/extlinux/extlinux.arch.template /boot/extlinux/extlinux.conf
    else
        # Kernel does not provide template, get sbc template
        colorecho "$YELLOW" "Downloading extlinux template for ${install_target} ..."
        curl -LRO https://github.com/kwankiu/archlinux-installer-rock5/releases/download/kernel/${install_target}.extlinux.template
        sudo mv ${install_target}.extlinux.template /boot/extlinux/extlinux.conf
    fi        
        
    colorecho "$YELLOW" "Generating extlinux.conf from template ..."
    # Get rootfs partition from the current mount point "/"
    rootfs_partition=$(mount | grep "on / " | awk '{print $1}')

    # Find the UUIDs of the root partition
    root_uuid=$(sudo blkid $rootfs_partition | awk '{print $2}' | tr -d '"')
    echo "Root partition UUID: $root_uuid"

    colorecho "$GREEN" "Updating extlinux.conf ..."

    # Change pkgbase for extlinux.conf
    if sudo test ! -e "/boot/dtbs/$kernelpkg"; then 
        sudo sed -i "s|/dtbs/%PKGBASE%|/dtbs|" /boot/extlinux/extlinux.conf
    fi

    # fix rockchip overlay directory name
    if sudo test -e "/boot/dtbs/$kernelpkg/rockchip/overlay"; then
        sudo sed -i "s|/rockchip/overlays|/rockchip/overlay|" /boot/extlinux/extlinux.conf
    fi

    sudo sed -i "s|%PKGBASE%|$kernelpkg|" /boot/extlinux/extlinux.conf

    # Change UUID for extlinux.conf   
    sudo sed -i "s|UUID=\\*\\*CHANGEME\\*\\*|$root_uuid|" /boot/extlinux/extlinux.conf
    sudo sed -i "s|UUID=CHANGEME|$root_uuid|" /boot/extlinux/extlinux.conf

    # Check if /boot is mounted as a partition or directory
    if mountpoint -q /boot; then
        colorecho "$GREEN" "/boot is mounted as a partition"
        colorecho "$GREEN" "Done"
    else
        colorecho "$GREEN" "/boot is mounted as a directory"
        colorecho "$GREEN" "Updating paths for extlinux.conf ..."
        sudo sed -i "s| /vmlinuz| /boot/vmlinuz|" /boot/extlinux/extlinux.conf
        sudo sed -i "s| /initramfs| /boot/initramfs|" /boot/extlinux/extlinux.conf
        sudo sed -i "s| /initrd| /boot/initrd|" /boot/extlinux/extlinux.conf
        sudo sed -i "s| /dtbs| /boot/dtbs|" /boot/extlinux/extlinux.conf
        sudo sed -i "s| /dtbo| /boot/dtbo|" /boot/extlinux/extlinux.conf
    fi

################################################################
# Install Graphics Acceleration

title "Installing Graphics Acceleration"

    if sudo pacman -Ssy "mesa-panfork-git" &> /dev/null; then
        sudo pacman -S mesa-panfork-git libmali-valhall-g610-x11-wayland-gbm --noconfirm
    else
        sudo pacman -S mesa --noconfirm
    fi

################################################################
# Install Video Acceleration

title "Installing Video Acceleration"

    if sudo pacman -Ssy "mpp-git" &> /dev/null; then
        sudo pacman -S mpp-git --noconfirm
    elif sudo pacman -Ssy "mpp" &> /dev/null; then
        sudo pacman -S mpp --noconfirm
    fi

    if sudo pacman -Ssy "ffmpeg4.4-mpp" &> /dev/null; then
        sudo pacman -S ffmpeg4.4-mpp --noconfirm   
    fi

    if sudo pacman -Ssy "ffmpeg-rockchip-git" &> /dev/null; then
        sudo pacman -S ffmpeg-rockchip-git --noconfirm
    elif sudo pacman -Ssy "ffmpeg-mpp-git" &> /dev/null; then
        sudo pacman -S ffmpeg-mpp-git --noconfirm
    else
        sudo pacman -S ffmpeg--noconfirm
    fi

################################################################
# Post Installation

title "Post Installation (Part 1)"

colorecho "$GREEN" "Performing Full System Upgrade ..."

if [[ "$kernelpkg" != "linux-aarch64" ]]; then
    sudo pacman -Syyu --noconfirm --ignore linux-aarch64
else
    sudo pacman -Syyu --noconfirm
fi

# SBC or Kernel Specfic Post Installation
if [ "$install_target" = "rock5" ] || [ "$install_target" = "orangepi5" ]; then
    #colorecho "$GREEN" "Fix: blacklist conflicting bluetooth drivers ..."
    #echo -e "blacklist pgdrv\nblacklist btusb\nblacklist btrtl\nblacklist btbcm\n#blacklist btintel" | sudo tee -a /etc/modprobe.d/blacklist.conf
    # Disable Sleep
    colorecho "$GREEN" "Disable suspend ..."
    sudo mkdir -p /usr/lib/systemd/system/sleep.conf.d
    echo -e "[Sleep]\nAllowSuspend=no\nAllowHibernation=no\nAllowSuspendThenHibernate=no\nAllowHybridSleep=no" | sudo tee /usr/lib/systemd/system/sleep.conf.d/nosuspend.conf
fi

if [ "$install_target" = "edge2" ]; then
    colorecho "$GREEN" "Fix : Switch WiFi backend to iwd ..."
    sudo mkdir -p /etc/NetworkManager/conf.d
    echo -e "[device]\nwifi.backend=iwd" | sudo tee /etc/NetworkManager/conf.d/wifi_backend.conf
    # FAN control for Edge 2
    colorecho "$GREEN" "Installing FAN control for Edge 2 ..."
    curl -LJO https://raw.githubusercontent.com/BredOS/sbc-pkgbuilds/main/edge2-post-install/fan.sh
    sudo chmod +x fan.sh
    sudo mv fan.sh /usr/local/bin/fan.sh
    colorecho "$GREEN" "Creating FAN control service ..."
    echo -e "[Unit]\nDescription=FAN control\nDefaultDependencies=no\nAfter=local-fs.target\n\n[Service]\nExecStart=/usr/bin/sudo /usr/local/bin/fan.sh\nRemainAfterExit=no\n\n[Install]\nWantedBy=sysinit.target" | sudo tee -a /usr/lib/systemd/system/fan.service
    sudo systemctl enable fan.service
fi

if [ "$install_target" = "edge2" ] || [ "$install_target" = "orangepi5" ]; then
    # For testing, to enable AP6275P bluetooth
    colorecho "$GREEN" "Fix : AP6275P Bluetooth ..."
    curl -LJO https://github.com/kwankiu/archlinux-installer-rock5/releases/download/kernel/brcm_patchram_plus
    sudo chmod +x brcm_patchram_plus
    sudo mv brcm_patchram_plus /usr/bin/brcm_patchram_plus
    echo -e '#!/bin/bash\nbt_status=$(cat /proc/device-tree/wireless-bluetooth/status | tr -d "\\0")\nwifi_chip=$(cat /proc/device-tree/wireless-wlan/wifi_chip_type | tr -d "\\0")\nif [[ ${wifi_chip} == "ap6275p" && ${bt_status} == "okay" ]]; then\n    echo "Enabling BT from ap6275p..."\n    rfkill unblock all\n    brcm_patchram_plus --enable_hci --no2bytes --use_baudrate_for_download --tosleep 200000 \\\n    --baudrate 1500000 --patchram /lib/firmware/ap6275p/BCM4362A2.hcd /dev/ttyS9 &\n    echo $! > /var/run/brcm_patchram_plus.pid\nelse\n    echo "Error: Your BT ap6275p firmware is probably not loaded"\n    echo "WiFi Chip Info: ${wifi_chip}"\n    echo "BT Status: ${bt_status}"\nfi' | sudo tee /usr/local/bin/bt_ap6275p.sh >/dev/null 
    sudo chmod +x /usr/local/bin/bt_ap6275p.sh
    echo -e '[Unit]\nDescription=AP6275P Bluetooth service\nAfter=bluetooth.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/sudo /usr/local/bin/bt_ap6275p.sh\nTimeoutSec=0\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target' | sudo tee /usr/lib/systemd/system/bt_ap6275p.service
    sudo systemctl enable bt_ap6275p.service
fi

# Network Manager, WiFi, Bluetooth
colorecho "$GREEN" "Installing network manager and bluetooth ..."
sudo pacman -Sy networkmanager iw iwd bluez --noconfirm

# Basic Fonts for Asian Characters and Emoji
colorecho "$GREEN" "Installing fonts ..."
sudo pacman -Sy noto-fonts noto-fonts-cjk noto-fonts-emoji --noconfirm

################################################################
# Install desktop environment

title "Install desktop environment"

# Install desktop environment
if [ "$de_options" = 0 ]; then
    # Install Gnome
    colorecho "$GREEN" "Installing Gnome (Full) ..."
    sudo pacman -S gnome --noconfirm
    #GDM_CONFIG_FILE="/etc/gdm/custom.conf"
    #if [ -f "$GDM_CONFIG_FILE" ]; then
        #sudo sed -i 's/^#WaylandEnable/WaylandEnable=false/' "$GDM_CONFIG_FILE"
        #echo "Wayland has been disabled for GDM."
    #else
        #echo "GDM configuration file ($GDM_CONFIG_FILE) not found."
    #fi
    sudo systemctl enable gdm
elif [ "$de_options" = 1 ]; then
    # Install Gnome
    colorecho "$GREEN" "Installing Gnome (Minimal) ..."
    sudo pacman -S gnome-shell gdm gnome-keyring gnome-control-center gnome-console gnome-disk-utility gnome-tweaks gnome-backgrounds nautilus xdg-user-dirs --noconfirm
    sudo systemctl enable gdm
elif [ "$de_options" = 2 ]; then
    # Install KDE Plasma
    colorecho "$GREEN" "Installing KDE Plasma (Full) ..."
    sudo pacman -S plasma-meta sddm kde-applications-meta --noconfirm
    sudo systemctl enable sddm
elif [ "$de_options" = 3 ]; then
    # Install KDE Plasma
    colorecho "$GREEN" "Installing KDE Plasma (No KDE Apps) ..."
    sudo pacman -S plasma-meta sddm konsole --noconfirm
    sudo systemctl enable sddm
elif [ "$de_options" = 4 ]; then
    # Install Budgie
    colorecho "$GREEN" "Installing Budgie Desktop ..."
    sudo pacman -S budgie gdm arc-gtk-theme papirus-icon-theme gnome-console gnome-disk-utility nautilus --noconfirm
    sudo systemctl enable gdm
elif [ "$de_options" = 5 ]; then
    # Install Sway
    colorecho "$GREEN" "Installing Sway ..."
    sudo pacman -S sway wmenu i3status mako waybar swayidle swaylock swaybg sddm foot xorg-xwayland qt5-wayland wofi lxappearance qt5ct python-pywal pcmanfm-qt pass dunst mako thunar --noconfirm
    sudo systemctl enable sddm
    sudo mkdir -p .config/{sway,dunst,waybar,wofi}
    sudo install -Dm755 /etc/sway/config ~/.config/sway/config
    sudo install -Dm755 /etc/dunst/dunstrc ~/.config/dunst/dunstrc
    sudo touch ~/.config/waybar/config
    sudo touch ~/.config/wofi/config
elif [ "$de_options" = 6 ]; then
    # Install Cutefish
    colorecho "$GREEN" "Installing Cutefish ..."
    sudo pacman -S cutefish --noconfirm
    #sudo systemctl enable sddm
elif [ "$de_options" = 7 ]; then
    # Install XFCE
    colorecho "$GREEN" "Installing XFCE ..."
    sudo pacman -S xfce4 xfce4-goodies sddm capitaine-cursors arc-gtk-theme leafpad galculator xdg-user-dirs-gtk --noconfirm
    sudo systemctl enable sddm
elif [ "$de_options" = 8 ]; then
    # Install LXQT
    colorecho "$GREEN" "Installing LXQT ..."
    sudo pacman -S lxqt breeze-icons sddm --noconfirm
    sudo systemctl enable sddm
elif [ "$de_options" = 9 ]; then
    # Install LXDE
    colorecho "$GREEN" "Installing LXDE ..."
    sudo pacman -S lxde xscreensaver --noconfirm
    sudo systemctl enable lxdm
elif [ "$de_options" = 10 ]; then
    # Install MATE
    colorecho "$GREEN" "Installing MATE ..."
    sudo pacman -S mate mate-extra gdm --noconfirm
    sudo systemctl enable gdm
elif [ "$de_options" = 11 ]; then
    # Install Cinnamon
    colorecho "$GREEN" "Installing Cinnamon ..."
    sudo pacman -S cinnamon cinnamon-translations nemo-fileroller nemo-image-converter nemo-preview xed xreader gnome-console gdm --noconfirm
    sudo systemctl enable gdm
else
    colorecho "$YELLOW" "Skipping install desktop environment ..."
fi

################################################################
# Post Installation

title "Post Installation (Part 2)"

colorecho "$GREEN" "Enabling network manager and bluetooth service ..."
sudo systemctl enable NetworkManager.service
sudo systemctl start NetworkManager.service
sudo systemctl enable bluetooth.service
sudo systemctl start bluetooth.service

################################################################
# Install additional packages

#colorecho "$GREEN" "Starting additional packages installer ..."
#arch-rock-config install --installer

################################################################
# Installation clean up

title "Installation Finished"

# Detect the current username
current_username=$(whoami)

# Check if "installer" exists in .bashrc
if sudo grep -q "installer" /home/$current_username/.bashrc; then
    # Remove "installer" from .bashrc
    sudo sed -i '/installer/d' /home/$current_username/.bashrc
    sudo rm -rf /etc/systemd/system/getty@tty1.service.d/autologin.conf
fi

# Prompt user to reboot
read -t 5 -p "Changes have been made. We will reboot your system in 5 seconds. Do you want to reboot now? (y/n): " reboot_choice

if [[ "$reboot_choice" == "n" || "$reboot_choice" == "N" ]]; then
    arch-rock-config user manage $current_username sudopw
    echo "You may manually reboot later to apply the changes."
    echo "To remove this installer, run sudo rm -rf /usr/bin/installer"
else
    colorecho "$GREEN" "Cleaning up installations ..."
    sudo rm -rf /usr/bin/installer
    arch-rock-config user manage $current_username sudopw
    colorecho "$GREEN" "Rebooting system ..."
    if ! sudo systemctl reboot; then
        if ! sudo reboot; then
            echo "Unable to reboot automatically, please reboot your device manually."
        fi
    fi
fi

################################################################