#!/bin/bash

#################################################################
#                    _     _      _                             #
#     /\            | |   | |    (_)                            #
#    /  \   _ __ ___| |__ | |     _ _ __  _   ___  __           #
#   / /\ \ | '__/ __| '_ \| |    | | '_ \| | | \ \/ /           #
#  / ____ \| | | (__| | | | |____| | | | | |_| |>  <            #
# /_/    \_\_|  \___|_| |_|______|_|_| |_|\__,_/_/\_\ __        #
#  _____           _        _ _           (  __)/  \(  _ \      #
# |_   _|         | |      | | |           ) _)(  O ))   /      #
#   | |  _ __  ___| |_ __ _| | | ___ _ __ (__)  \__/(__\_)      #
#   | | | '_ \/ __| __/ _` | | |/ _ \ '__|    /__\ (  _ \( \/ ) #
#  _| |_| | | \__ \ || (_| | | |  __/ |      /    \ )   // \/ \ #
# |_____|_| |_|___/\__\__,_|_|_|\___|_|      \_/\_/(__\_)\_)(_/ #
#                                                               #
#################################################################
# Version of this script 
# (For developer : Update whenever there is a change in this file or its related files)
# format of Version Number is YYMMDDN which N is 1-99 count on updates commited on the same day)
installerver=24041106

# required ACU version
acuver=0.0.6-dev

# Define main / dev branch
branch=dev

# Target Device for Installation
install_target="rock5"

################################################################
# Compiled Packages folder path
compiled_pkg_folder="/usr/lib/installer/packages"

# Dialog Theme config file path
dialog_theme_config="/usr/lib/installer/dialog.conf"

# Install using the generated configurations
install_config="/usr/lib/installer/install.yaml"

# Full Language list
lang_file="https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/dev/config/language.yaml"

# Pacman ParallelDownloads
prldownloads=50

################################################################
# Tools for formatting / styling

# Define terminal color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# Sudo override
sudo () {
    local command=$@
    if [ "$(id -u)" -eq 0 ]; then
        #echo "Running in root."
        command "$@"
    else
        #echo "Running with sudo."
        command sudo "$@"
    fi
}

# Dialog override for debugging CLI Fallback
# dialog () { return 1; }

# Echo with colors
colorecho() {
    color="$1"
    text="$2"
    echo -e "${color}${text}${NC}"
}

title_string="Arch Linux Installer for ARM"

# Title Logo
titlelogo_string() {
    # Check if the argument count is provided
    if [ -z "$1" ]; then
        local count=8
    else
        local count=$1
    fi
    
    # Generate the linespacing string with the specified count of spaces
    local linespacing=$(printf "%${count}s")
    local logostring="$linespacing                   _     _      _                  \n$linespacing    /\            | |   | |    (_)                 \n$linespacing   /  \   _ __ ___| |__ | |     _ _ __  _   ___  __\n$linespacing  / /\ \ | '__/ __| '_ \| |    | | '_ \| | | \ \/ /\n$linespacing / ____ \| | | (__| | | | |____| | | | | |_| |>  < \n$linespacing/_/    \_\_|  \___|_| |_|______|_|_| |_|\__,_/_/\_\ __\n$linespacing _____           _        _ _           (  __)/  \(  _ \  \n$linespacing|_   _|         | |      | | |           ) _)(  O ))   /  \n$linespacing  | |  _ __  ___| |_ __ _| | | ___ _ __ (__)  \__/(__\_)\n$linespacing  | | | '_ \/ __| __/ _\` | | |/ _ \ '__|    /__\ (  _ \( \/ )\n$linespacing _| |_| | | \__ \ || (_| | | |  __/ |      /    \ )   // \/ \ \n$linespacing|_____|_| |_|___/\__\__,_|_|_|\___|_|      \_/\_/(__\_)\_)(_/\n$linespacing"
    # Echo the logo string
    echo "$logostring"
}

dash_string() {
    # Check if the argument count is provided
    if [ -z "$1" ]; then
        local count=80
    else
        local count=$1
    fi

    for ((i = 0; i < count; i++)); do
        echo -n "-"
    done
}

title() {
  clear
  text="$1"
  echo "$(dash_string)"
  colorecho "$BLUE" "$(titlelogo_string)"
  echo "$(dash_string)"
  if [ "$branch" = "dev" ]; then
    colorecho "$YELLOW" "You are running a development build installer. It is experimental and may not work properly."
  fi
}

status_bar() {
    # Get the terminal width
    terminal_width=$(tput cols)

    # Calculate the width of each item
    item_left=$(( (terminal_width - 4) / 3 ))  # Subtracting 4 for the brackets and spaces
    item_center=$(( ((terminal_width - 4) / 6) + 3 ))  # Subtracting 4 for the brackets and spaces
    item_right=$(( ((terminal_width - 4) / 2) - 3 ))  # Subtracting 4 for the brackets and spaces

    # Define the strings for left, center, and right items
    left_item="[$title_string$menu_header]"
    center_item="$(date +"%b %e %H:%M")"
    if [ "$internet_available" = 1 ]; then
        right_item="[Internet Connected]"
    elif [ "$internet_available" = 2 ]; then
        right_item="[No Internet]"
    else
        right_item="[Waiting for Network]"
    fi
    # Print the items with alignment
    printf "%-${item_left}s%${item_center}s%${item_right}s\n" "$left_item" "$center_item" "$right_item"
}

################################################################
# CLI and TUI Menus and Functions

# TUI Theme (dialog)
create_dialog_theme() {
    colorecho "$GREEN" "Generating Installer Theme ..."
    sudo mkdir -p $(dirname $dialog_theme_config)
    sudo tee "$dialog_theme_config" <<EOF
# Arch Linux Installer for ARM
# Run-time configuration theme for dialog
#
# Types of values:
#
# Number     -  <number>
# String     -  "string"
# Boolean    -  <ON|OFF>
# Attribute  -  (foreground,background,highlight?,underline?,reverse?)

# Screen color
screen_color = (WHITE,WHITE,ON)
# Shadow color
shadow_color = (BLUE,BLUE,OFF)
# Dialog box color
dialog_color = (BLACK,WHITE,ON)
# Dialog box border color
border_color = (BLUE,WHITE,OFF)
# Menu box border color
menubox_border_color = border_color
# Inactive button label color
button_label_inactive_color = (BLUE,WHITE,ON)
# Dialog box border2 color
border2_color = (BLUE,WHITE,ON)
EOF
    sudo chmod +x $dialog_theme_config
}

# CLI Select Menu
function select_option_cli {

    # Little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # Initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # Determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # Ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # Print options by overwriting the last lines
        local idx=0
        local max_width=$(tput cols)
        for opt; do
            cursor_to $(($startrow + $idx))
            local formatted_opt="$((idx + 1)) \t $opt"
            local formatted_opt=$(echo "$formatted_opt" | cut -c1-$((max_width - 3)))
            if [ $idx -eq $selected ]; then
                print_selected "$formatted_opt"
            else
                print_option "$formatted_opt"
            fi
            ((idx++))
        done

        # User key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # Cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# TUI Select Menu
select_option() {

    export DIALOGRC=$dialog_theme_config
    local i=0
    print_option()     { echo "$1"; }

    # menu header
    if [ -n "$menu_header" ]; then
        dialog_title="$menu_header"
        menu_header=" - $menu_header"
    else
        dialog_title="Welcome to Arch Linux !"
    fi

    # menu option title
    if [ -z "$menu_option_title" ]; then
        menu_option_title="Select an option:"
    fi

    # Create options string for dialog
    declare -a options_string=()
    for opt; do
        options_string+=("$((i + 1))" "$(print_option "$opt")")
        ((i++))
    done

    # launch TUI using dialog
    choice=$(dialog --colors --backtitle " \Zu\Z4 $(status_bar) "  \
        --title " $dialog_title " --ok-label "Next" --nocancel \
        --menu "\n\Zb\Z4$(titlelogo_string) \n\n $menu_option_title \Zn" 0 0 0 "${options_string[@]}" \
    3>&1 1>&2 2>&3 3>&- # Swap stdout with stderr to capture returned dialog text
    )

    case $? in
    0)
        choice=$((choice - 1))
        return $choice
        ;;
    *)
        # CLI Fallback
        title
        colorecho "$BLUE" "${dialog_title//\\Z[0-7bun]/}"
        echo "$(dash_string)"
        colorecho "$GREEN" "${menu_option_title//\\Z[0-7bun]/}"
        echo
        select_option_cli "$@"
        ;;
    esac
}

# TUI Info Box
info_alert() {

    export DIALOGRC=$dialog_theme_config
    local i=0

    # menu header
    if [ -n "$menu_header" ]; then
        if [[ "$menu_header" != *" - "* ]]; then 
            dialog_title="$menu_header"
            menu_header=" - $menu_header"
        fi
    else
        dialog_title="Info"
    fi

    for opt; do
        ((i++))
    done

    # launch TUI using dialog
    dialog --colors --backtitle " \Zu\Z4 $(status_bar) "  \
        --title " $dialog_title " \
        --infobox "\n\Zb\Z4$(titlelogo_string 2)\Zn \n$opt\n\n" 0 0
}

# TUI Confirm Box
confirm() {

    export DIALOGRC=$dialog_theme_config
    local i=0

    # menu header
    if [ -n "$menu_header" ]; then
        if [[ "$menu_header" != *" - "* ]]; then 
            dialog_title="$menu_header"
            menu_header=" - $menu_header"
        fi
    else
        dialog_title="Confirm"
    fi

    for opt; do
        ((i++))
    done

    # launch TUI using dialog
    if dialog --colors --backtitle " \Zu\Z4 $(status_bar) "  \
        --title " $dialog_title " \
        --yesno "\n\Zb\Z4$(titlelogo_string 2)\Zn \n$opt\n\n" 0 0; then
        return 0
    else
        return 1
    fi
    
}

# TUI Input Box
input() {

    export DIALOGRC=$dialog_theme_config
    local i=0

    # menu header
    if [ -n "$menu_header" ]; then
        if [[ "$menu_header" != *" - "* ]]; then 
            dialog_title="$menu_header"
            menu_header=" - $menu_header"
        fi
    else
        dialog_title="Enter an input"
    fi

    for opt; do
        ((i++))
    done

    # launch TUI using dialog
    local value=$(dialog --colors --backtitle " \Zu\Z4 $(status_bar) "  \
        --title " $dialog_title " --nocancel \
        --inputbox "\n\Zb\Z4$(titlelogo_string 2)\Zn \n$opt\n\n" 0 0 \
    3>&1 1>&2 2>&3 3>&- # Swap stdout with stderr to capture returned dialog text
    )

    echo $value
    
}

# TUI Form Input Menu
form() {

    export DIALOGRC=$dialog_theme_config
    local i=0
    print_option()     { echo "$1"; }

    # menu header
    if [ -n "$menu_header" ]; then
        dialog_title="$menu_header"
        menu_header=" - $menu_header"
    else
        dialog_title="Welcome to Arch Linux !"
    fi

    # menu option title
    if [ -z "$menu_option_title" ]; then
        menu_option_title="Select an option:"
    fi

    # Create options string for dialog
    declare -a options_string=()
    for opt; do
        options_string+=("$(print_option "$opt")" "$((i + 1))" "5" "${menu_form_value[i]}" "$((i + 1))" "40" "25" "5")
        #"Form Label 1:" 1 1 "Value 1" 1 25 25 30
        ((i++))
    done

    # launch TUI using dialog
    local value=$(dialog --colors --backtitle " \Zu\Z4 $(status_bar) "  \
        --title " $dialog_title " --ok-label "Next" --nocancel \
        --form "\n\Zb\Z4$(titlelogo_string) \n\n $menu_option_title \Zn" 0 0 0 \
        "${options_string[@]}" \
    3>&1 1>&2 2>&3 3>&- # Swap stdout with stderr to capture returned dialog text
    )

    echo $value
}

################################################################
# Internet Connection & Updates Check
internet_available=0
check_internet() {
    servers=("google.com" "1.1.1.1" "114.114.114.114") # ping Google, Cloudflare and China Mobile DNS (for China users)
    #servers=("invalid.example") # debug test case: simulate no internet 
    #servers=("0.0.0.0") # debug test case: bypass internet
        for server in "${servers[@]}"; do
            if ping -q -c 3 "$server" >/dev/null 2>&1; then
                internet_found_at="$server"
                internet_available=1 # internet connected
                ckin='s'
                echo $ckin
                return
            elif ip link show | grep "state UP"; then
                internet_available=2 # network connected but no internet access
            fi
        done
}

network_menu()
{
    menu_header="Network Setup"

    # Check if there is a Wireless Interface and get the first one
    for dev in /sys/class/net/*; do
        if [ -e "$dev"/wireless ]; then
            iwdev=${dev##*/};
            break;
        fi
    done

    local last_check=$(date +%s)
    local last_internet

    while [[ "$ckin" != [wWsS] ]]; do
        read -t 0.1 -n 1 tmp && ckin=$tmp
        # Perform internet check every 3 seconds
        current_time=$(date +%s)
        if [ $((current_time - last_check)) -ge 3 ]; then
            # Check internet connectivity in the background
            check_internet
            last_check=$current_time
        fi
        # Keep tracking for wireless adapter if not found
        if [ -z "$iwdev" ]; then
            for dev in /sys/class/net/*; do
                if [ -e "$dev"/wireless ]; then
                    iwdev=${dev##*/};
                    break;
                fi
            done
            wl_adapter="No adapter found"
        else
            wl_adapter=$iwdev
        fi
        # Network Status
        if [ "$internet_available" = 1 ]; then
            network_status="             Internet is available via $internet_found_at"
        elif [ "$internet_available" = 2 ]; then
            network_status="            Network Connected. Waiting for Internet ..."
        else
            network_status="                    Waiting for Network ..."
        fi
        menu_option_title="\n\Z2$network_status\n\n\ZnEnter a key:\n\n"
        if [ $((current_time - last_check)) -ge 6 ] || [ "$last_internet" != "$internet_available" ]; then
            info_alert "$menu_option_title w) Connect to a WiFi network ($wl_adapter) \n s) Skip Internet Check (Installation may fail)"
            last_internet=$internet_available
        fi
    done
    # Restore terminal settings
    clear

    case $ckin in
        [wW])
            echo "Connecting to a WiFi network..."
            if [ -z "$iwdev" ]; then
                read -p "Please specify the network device (e.g. wlan0): " iwdev
            fi
            if [ -x "$(command -v sudo)" ]; then
                sudo wifi-menu $iwdev
            else
                wifi-menu $iwdev
                colorecho "$GREEN" "Enabling netctl Auto Connect ..."
                systemctl enable netctl-auto@$iwdev.service
            fi               
            ;;
    esac

    # Loop until curl is successful or max attempts reached
    attempt=0
    until curl -sSf https://raw.githubusercontent.com/ >/dev/null 2>&1 || [ "$attempt" -ge 5 ]; do
        colorecho "$RED" "Establishing SSL internet connection ..."
        # NTP Sync
        if [ "$attempt" -eq 1 ]; then
            colorecho "$GREEN" "Updating NTP Time Sync ..."
            if [ -x "$(command -v sudo)" ]; then
                sudo rm -rf /etc/systemd/network/*
                sudo systemctl restart systemd-networkd
                sleep 1
                sudo timedatectl set-ntp false
                sudo timedatectl set-ntp true
            else
                rm -rf /etc/systemd/network/*
                systemctl restart systemd-networkd
                sleep 1
                timedatectl set-ntp false
                timedatectl set-ntp true
            fi
        fi
        sleep 5
        ((attempt++))
    done

    if [ "$attempt" -ge 5 ]; then
        systemctl status systemd-timesyncd # for debugging
        colorecho "$RED" "Failed to establish SSL internet connection after $attempt attempts."
        colorecho "$YELLOW" "Restart your device and try again or press Ctrl+C to exit this installer for manual operation."
        options=("Continue Anyway (may break)" "Restart Now")
        select_option "${options[@]}"
        answer=$?
        if [ "$answer" = 1 ]; then
            colorecho "$GREEN" "System will reboot now."
            if ! reboot --force; then
                echo "Unable to reboot automatically, please reboot your device manually."
            fi
        fi
    fi
}

# Check Installer Updates
check_installer_updates() {
    colorecho "$YELLOW" "Checking for installer updates..."
    remote_installerver=$(curl -s "https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tui-installer" | grep -o 'installerver=[0-9]*' | cut -d= -f2)
    remote_acuver=$(curl -s "https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tui-installer" | grep -o 'acuver=[0-9]*' | cut -d= -f2) #TODO
    if [ "$remote_installerver" -gt "$installerver" ]; then
        menu_header="Installer Updates Available"
        menu_option_title="\Z2A newer version ($remote_installerver) of this installer is available. \n\Zn Do you want to update this installer?"
        options=("Update this Installer" "Do not update this installer")
        select_option "${options[@]}"
        answer=$?
        if [ "$answer" = 0 ]; then
            # Download Installer
            colorecho "$GREEN" "Downloading Installer ..."
            #exit 1 #THIS PREVENTS AN UPDATE #ONLY USED TO PREVENT DATA LOSS IN DEVELOPMENT
            curl -LJO https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tui-installer

            # Update tui-installer
            colorecho "$GREEN" "Updating Installer ..."
            sudo sed -i "s/install_target=\"rock5\"/install_target=\"$install_target\"/g" tui-installer
            sudo chmod +x tui-installer
            sudo cp -r tui-installer /usr/bin/installer
            sudo rm -rf tui-installer
            colorecho "$GREEN" "Installer updated. System will reboot now."
            if ! sudo reboot --force; then
                echo "Unable to reboot automatically, please reboot your device manually."
            fi

            # Update ACU
            echo "Updating ACU (Configuration Utility) ..."
            curl -o /usr/bin/acu -L "https://raw.githubusercontent.com/kwankiu/acu/$remote_acuver/acu"
            chmod +x /usr/bin/acu
        fi
    fi
}

################################################################
# Installation - Part 1 (in root)

add_boot_part_fstab() {
    echo "Updating fstab ..."
    boot_partition=$(fdisk -l "$rootfs_disk" | grep "$rootfs_disk" | awk 'NR==2{print $1}')

    # Check if the boot_partition is not empty
    if [ -z "$boot_partition" ]; then
        echo "Unable to determine boot partition on $rootfs_disk"
        exit 1
    fi

    # Add the line to /etc/fstab
    new_line="$boot_partition /boot vfat dmask=000,fmask=0111,user 0 0"

    # Check if the line already exists in /etc/fstab
    if grep -qF "/boot vfat dmask=000,fmask=0111,user 0 0" /etc/fstab; then
        echo "boot partition seems already configured in /etc/fstab to manage by system."
    else
        # Add the line to /etc/fstab
        echo "$new_line" >> /etc/fstab
        # Check if the addition was successful
        if [ $? -eq 0 ]; then
            cat /etc/fstab
            echo "Line added to /etc/fstab successfully"
        else
            echo "Error adding line to /etc/fstab"
        fi
    fi
}

install_part1() {
    info_alert "Running Initial System Setup ..."

    # Get rootfs partition from the current mount point "/"
    rootfs_partition=$(mount | grep "on / " | awk '{print $1}')

    # Get disk path using rootfs partition path
    rootfs_disk=$(echo "$rootfs_partition" | sed 's/[0-9]*$//')
    rootfs_disk="${rootfs_disk%p*}"

    if [ ! -e "/boot/extlinux/extlinux.conf" ]; then 
        add_boot_part_fstab
    fi

    info_alert "Resizing File System ..."
    growpart $rootfs_disk 2
    resize2fs $rootfs_partition

    # Initialize the pacman keyring and populate the Arch Linux ARM package signing keys
    info_alert "Configuring pacman (populate alarm keys) ..."
    pacman-key --init
    pacman-key --populate archlinuxarm

    info_alert "Configuring pacman (adding repositories) ..."
    for ((i = 0; i < ${#pacmanrepo[@]}; i++)); do
        acu rem set pacman "${pacmanrepo[i]}"
    done

    info_alert "Configuring pacman (enabling ParallelDownloads)..."
    sed -i "s/^#ParallelDownloads\\s*=\\s*\\([0-9]\\{1,3\\}\\)\\?$/ParallelDownloads = $prldownloads/" /etc/pacman.conf

    info_alert "Installing sudo ..."
    pacman -Sy sudo --noconfirm

    info_alert "Removing default account ..."
    acu user remove alarm

    info_alert "Setting up new user account ..."
    acu user add ${user_acc[0]} ${user_acc[1]}
    acu user manage ${user_acc[0]} sudopw

    hostname=$(hostnamectl --static)
    echo "${user_acc[0]} $hostname =NOPASSWD: /usr/bin/systemctl poweroff,/usr/bin/systemctl halt,/usr/bin/systemctl reboot" | tee -a "/etc/sudoers" >/dev/null

    if [[ "${user_acc[3]}" != [Yy] ]]; then
        passwd -l root
    fi

    if [ -e "/etc/systemd/system/installer.service" ]; then 
        systemctl disable installer.service
        rm -rf /etc/systemd/system/installer.service
    fi

    mkdir -p /etc/systemd/system/getty@tty1.service.d
    echo -e "[Service]\nExecStart=\nExecStart=-/sbin/agetty -o '-p -f -- \\u' --noclear --autologin ${user_acc[0]} %I \$TERM" | tee /etc/systemd/system/getty@tty1.service.d/autologin.conf
    echo "installer part2 --kernel=$kernelpkg --de=$de_options" | tee -a /home/${user_acc[0]}/.bashrc

    info_alert "System will reboot now."
    if ! reboot --force; then
        echo "Unable to reboot automatically, please reboot your device manually."
    fi
}

################################################################
# Installation - Part 2 (in user)
install_part2() {

    ################################################################
    # Handle install config
    for arg in "$@"; do
        case "$arg" in
            --kernel=*)
                kernelpkg="${arg#*=}"
                ;;
            --de=*)
                de_options="${arg#*=}"
                ;;
        esac
    done

    ################################################################
    # Install Kernel
    info_alert "Removing existing kernels ..."
    yes y|sudo pacman -R linux-aarch64
    sudo rm -rf /boot/vmlinu* 
    sudo rm -rf /boot/initr*
    sudo rm -rf /boot/dtbs
    sudo rm -rf /usr/lib/modules/*
    sudo rm -rf /etc/mkinitcpio.d/*

    info_alert "Installing linux kernel ..."
    oldkrlrel=$(uname -r)
    acu -y install $kernelpkg $kernelpkg-headers --device=$install_target #--overwrite
    sudo rm -rf /boot/dtbs/$oldkrlrel /lib/modules/$oldkrlrel

    info_alert "Installing Linux Firmware ..." 
    if [[ "$kernelpkg" == *"-orangepi"* ]]; then
        yes y|sudo pacman -S linux-firmware-orangepi-git
    elif [[ "$kernelpkg" == *"-radxa"* ]] && [ "$install_target" = "rock5" ]; then
        info_alert "Removing linux-firmware-joshua-git ..."
        yes y|sudo pacman -R linux-firmware-joshua-git
        info_alert "Installing DKMS Packages ..."
        acu -y install "8852bu-dkms-git" "8852be-dkms-git"
    elif [[ "$kernelpkg" == *"-joshua"* ]]; then
        yes y|sudo pacman -S linux-firmware-joshua-git
    elif [ "$install_target" = "rock5" ] || [ "$install_target" = "rock2" ] || [ "$install_target" = "edge2" ] || [ "$install_target" = "orangepi5" ] || [ "$install_target" = "zero3" ] || [ "$install_target" = "rockchip" ]; then
        yes y|sudo pacman -S linux-firmware-joshua-git
    fi

    ################################################################
    # Install Graphics Acceleration
    info_alert "Installing Graphics Acceleration"
    if [[ "$kernelpkg" == *"-panthor"* ]] || [[ "$kernelpkg" == *"-collabora"* ]] || [[ "$kernelpkg" == "linux-aarch64-7ji" ]]; then
        sudo pacman -S mesa-panfrost-git --noconfirm
    elif [[ "$kernelpkg" == "linux-aarch64-rockchip-bsp" ]]; then
        sudo pacman -S mesa-panfork-git --noconfirm
        sudo curl -L https://raw.githubusercontent.com/JeffyCN/mirrors/libmali/firmware/g610/mali_csffw.bin -o /lib/firmware/mali_csffw.bin
    elif sudo pacman -Ssy "mesa-panfork-git" &> /dev/null; then
        sudo pacman -S mesa-panfork-git mali-valhall-g610-firmware libmali-valhall-g610-x11-wayland-gbm --noconfirm
    else
        sudo pacman -S mesa --noconfirm
    fi

    ################################################################
    # Install Video Acceleration
    info_alert "Installing Video Acceleration"
    if sudo pacman -Ssy "mpp-git" &> /dev/null; then
        sudo pacman -S mpp-git --noconfirm
    elif sudo pacman -Ssy "mpp" &> /dev/null; then
        sudo pacman -S mpp --noconfirm
    fi

    if sudo pacman -Ssy "ffmpeg4.4-mpp" &> /dev/null; then
        sudo pacman -S ffmpeg4.4-mpp --noconfirm   
    fi

    if sudo pacman -Ssy "ffmpeg-rockchip-git" &> /dev/null; then
        sudo pacman -S ffmpeg-rockchip-git --noconfirm
    elif sudo pacman -Ssy "ffmpeg-mpp-git" &> /dev/null; then
        sudo pacman -S ffmpeg-mpp-git --noconfirm
    elif [ "$install_target" = "rpi" ]; then
        sudo pacman -S ffmpeg-rpi --noconfirm
    else
        sudo pacman -S ffmpeg--noconfirm
    fi

    ################################################################
    # Post Installation
    info_alert "Performing Full System Upgrade ..."
    sudo pacman -Syyu --noconfirm

    # SBC or Kernel Specfic Post Installation
    if [ "$install_target" = "rock5" ] || [ "$install_target" = "orangepi5" ]; then
        # Disable Sleep
        info_alert "Post Install: Disable suspend ..."
        sudo mkdir -p /usr/lib/systemd/system/sleep.conf.d
        echo -e "[Sleep]\nAllowSuspend=no\nAllowHibernation=no\nAllowSuspendThenHibernate=no\nAllowHybridSleep=no" | sudo tee /usr/lib/systemd/system/sleep.conf.d/nosuspend.conf
    fi

    if [ "$install_target" = "edge2" ]; then
        info_alert "Fix : Switch WiFi backend to iwd ..."
        sudo mkdir -p /etc/NetworkManager/conf.d
        echo -e "[device]\nwifi.backend=iwd" | sudo tee /etc/NetworkManager/conf.d/wifi_backend.conf
        # FAN control for Edge 2
        info_alert "Installing FAN control for Edge 2 ..."
        curl -LJO https://raw.githubusercontent.com/BredOS/sbc-pkgbuilds/main/edge2-post-install/fan.sh
        sudo chmod +x fan.sh
        sudo mv fan.sh /usr/local/bin/fan.sh
        info_alert "Creating FAN control service ..."
        echo -e "[Unit]\nDescription=FAN control\nDefaultDependencies=no\nAfter=local-fs.target\n\n[Service]\nExecStart=/usr/bin/sudo /usr/local/bin/fan.sh\nRemainAfterExit=no\n\n[Install]\nWantedBy=sysinit.target" | sudo tee /usr/lib/systemd/system/fan.service
        sudo systemctl enable fan.service
    fi

    if [ "$install_target" = "orangepi5" ]; then
        # Enable the USB 2.0 port
        info_alert "Fix: Enable the USB 2.0 port ..."
        echo -e "[Unit]\nDescription=Enable the USB 2.0 port\n\n[Service]\nExecStart=/usr/bin/sh -c \"echo host > /sys/kernel/debug/usb/fc000000.usb/mode\"\nType=oneshot\n\n[Install]\nWantedBy=default.target" | sudo tee /usr/lib/systemd/system/enable-usb2.service
        sudo systemctl enable enable-usb2
    fi

    if [ "$install_target" = "edge2" ] || [ "$install_target" = "orangepi5" ]; then
        # Enable AP6275P bluetooth
        info_alert "Fix : AP6275P Bluetooth ..."
        curl -LJO https://github.com/kwankiu/archlinux-installer-rock5/releases/download/kernel/brcm_patchram_plus
        sudo chmod +x brcm_patchram_plus
        sudo mv brcm_patchram_plus /usr/bin/brcm_patchram_plus
        echo -e '#!/bin/bash\nbt_status=$(cat /proc/device-tree/wireless-bluetooth/status | tr -d "\\0")\nwifi_chip=$(cat /proc/device-tree/wireless-wlan/wifi_chip_type | tr -d "\\0")\nif [[ ${wifi_chip} == "ap6275p" && ${bt_status} == "okay" ]]; then\n    echo "Enabling BT from ap6275p..."\n    rfkill unblock all\n    brcm_patchram_plus --enable_hci --no2bytes --use_baudrate_for_download --tosleep 200000 \\\n    --baudrate 1500000 --patchram /lib/firmware/ap6275p/BCM4362A2.hcd /dev/ttyS9 &\n    echo $! > /var/run/brcm_patchram_plus.pid\nelse\n    echo "Error: Your BT ap6275p firmware is probably not loaded"\n    echo "WiFi Chip Info: ${wifi_chip}"\n    echo "BT Status: ${bt_status}"\nfi' | sudo tee /usr/local/bin/bt_ap6275p.sh >/dev/null 
        sudo chmod +x /usr/local/bin/bt_ap6275p.sh
        echo -e '[Unit]\nDescription=AP6275P Bluetooth service\nAfter=bluetooth.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/sudo /usr/local/bin/bt_ap6275p.sh\nTimeoutSec=0\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target' | sudo tee /usr/lib/systemd/system/bt_ap6275p.service
        sudo systemctl enable bt_ap6275p.service
    fi

    # Network Manager, WiFi, Bluetooth
    info_alert "Installing network manager and bluetooth ..."
    sudo pacman -Sy networkmanager iw iwd bluez --noconfirm

    info_alert "Enabling network manager and bluetooth service ..."
    sudo systemctl enable NetworkManager.service
    sudo systemctl start NetworkManager.service
    sudo systemctl enable bluetooth.service
    sudo systemctl start bluetooth.service

    # Basic Fonts for Asian Characters and Emoji
    info_alert "Installing fonts ..."
    sudo pacman -Sy noto-fonts noto-fonts-cjk noto-fonts-emoji --noconfirm

    ################################################################
    # Install desktop environment

    title "Install desktop environment"

    # Install desktop environment
    if [ "$de_options" = 0 ]; then
        # Install Gnome
        info_alert "Installing Gnome (Full) ..."
        sudo pacman -S gnome --noconfirm
        sudo systemctl enable gdm
    elif [ "$de_options" = 1 ]; then
        # Install Gnome
        info_alert "Installing Gnome (Minimal) ..."
        sudo pacman -S gnome-shell gdm gnome-keyring gnome-control-center gnome-console gnome-disk-utility gnome-tweaks gnome-backgrounds nautilus xdg-desktop-portal xdg-desktop-portal-gnome xdg-user-dirs librsvg --noconfirm
        sudo systemctl enable gdm
    elif [ "$de_options" = 2 ]; then
        # Install KDE Plasma
        info_alert "Installing KDE Plasma (Full) ..."
        sudo pacman -S plasma-meta sddm kde-applications-meta --noconfirm
        sudo systemctl enable sddm
    elif [ "$de_options" = 3 ]; then
        # Install KDE Plasma
        info_alert "Installing KDE Plasma (No KDE Apps) ..."
        sudo pacman -S plasma-meta sddm konsole --noconfirm
        sudo systemctl enable sddm
    elif [ "$de_options" = 4 ]; then
        # Install Budgie
        info_alert "Installing Budgie Desktop ..."
        sudo pacman -S budgie gdm arc-gtk-theme papirus-icon-theme gnome-console gnome-disk-utility nautilus librsvg --noconfirm
        sudo systemctl enable gdm
    elif [ "$de_options" = 5 ]; then
        # Install Sway
        info_alert "Installing Sway ..."
        sudo pacman -S sway wmenu i3status waybar swayidle swaylock swaybg sddm foot xorg-xwayland qt5-wayland qt6-wayland wofi lxappearance qt5ct python-pywal pcmanfm-qt pass dunst thunar --noconfirm
        sudo systemctl enable sddm
        sudo mkdir -p .config/{sway,dunst,waybar,wofi}
        sudo install -Dm755 /etc/sway/config ~/.config/sway/config
        sudo install -Dm755 /etc/dunst/dunstrc ~/.config/dunst/dunstrc
        sudo touch ~/.config/waybar/config
        sudo touch ~/.config/wofi/config
    elif [ "$de_options" = 6 ]; then
        # Install Cutefish
        info_alert "Installing Cutefish ..."
        sudo pacman -S plasma-desktop cutefish sddm --noconfirm
        sudo systemctl enable sddm
    elif [ "$de_options" = 7 ]; then
        # Install XFCE
        info_alert "Installing XFCE ..."
        sudo pacman -S xfce4 xfce4-goodies sddm capitaine-cursors arc-gtk-theme leafpad galculator xdg-user-dirs-gtk --noconfirm
        sudo systemctl enable sddm
    elif [ "$de_options" = 8 ]; then
        # Install LXQT
        info_alert "Installing LXQT ..."
        sudo pacman -S lxqt breeze-icons sddm --noconfirm
        sudo systemctl enable sddm
    elif [ "$de_options" = 9 ]; then
        # Install LXDE
        info_alert "Installing LXDE ..."
        sudo pacman -S lxde xscreensaver --noconfirm
        sudo systemctl enable lxdm
    elif [ "$de_options" = 10 ]; then
        # Install MATE
        info_alert "Installing MATE ..."
        sudo pacman -S mate mate-extra gdm --noconfirm
        sudo systemctl enable gdm
    elif [ "$de_options" = 11 ]; then
        # Install Cinnamon
        info_alert "Installing Cinnamon ..."
        sudo pacman -S cinnamon cinnamon-translations nemo-fileroller nemo-image-converter nemo-preview xed xreader gnome-console gdm --noconfirm
        sudo systemctl enable gdm
    elif [ "$de_options" = 12 ]; then
        # Install Sway
        info_alert "Installing Hyprland ..."
        sudo pacman -S hyprland qt5-wayland xdg-desktop-portal-hyprland wofi pass dunst alacritty thunar sddm --noconfirm
        sudo systemctl enable sddm
        sed -i 's/kitty/alacritty/g' $HOME/.config/hypr/hyprland.conf
    else
        info_alert "Skipping install desktop environment ..."
    fi

    ################################################################
    # Installation clean up

    # Detect the current username
    current_username=$(whoami)

    # Check if "installer" exists in .bashrc
    if sudo grep -q "installer" /home/$current_username/.bashrc; then
        # Remove "installer" from .bashrc
        sudo sed -i '/installer/d' /home/$current_username/.bashrc
        sudo rm -rf /etc/systemd/system/getty@tty1.service.d/autologin.conf
    fi

    info_alert "Installation Finished. We will reboot your system in 5 seconds."
    sleep 5

    info_alert "Removing this installer ..."
    sudo rm -rf /usr/bin/installer
    acu user manage $current_username sudopw

    info_alert "Rebooting system ..."
    if ! sudo systemctl reboot; then
        if ! sudo reboot; then
            echo "Unable to reboot automatically, please reboot your device manually."
        fi
    fi

}

################################################################
# Installer Menu
installer_menu() {

    ################################################################
    # Choose Language

    # Full Language Choice Menu
    langchoicemenu() {
        menu_header="Language (More Options)"
        menu_option_title="Choose a language category:"
        eval $(acu parse $lang_file " ")
        select_option "${langopt[@]}" "Skip setting Language"
        choice=$?
        if [ "$choice" = 0 ]; then
            langchoice=("${langchi[@]}") # Chinese
        elif [ "$choice" = 1 ]; then
            langchoice=("${langeng[@]}") # English
        elif [ "$choice" = 2 ]; then
            langchoice=("${langspa[@]}") # Spanish
        elif [ "$choice" = 3 ]; then
            langchoice=("${langfre[@]}") # French
        elif [ "$choice" = 4 ]; then
            langchoice=("${langger[@]}") # German
        elif [ "$choice" = 5 ]; then
            langchoice=("${langara[@]}") # Arabic
        elif [ "$choice" = 6 ]; then
            title "Language (Others - sort by continents)"
            select_option "${langcon[@]}"
            choice=$?
            if [ "$choice" = 0 ]; then
                langchoice=("${langconas[@]}") # Asia
            elif [ "$choice" = 1 ]; then
                langchoice=("${langconeu[@]}") # Europe
            elif [ "$choice" = 2 ]; then
                langchoice=("${langconam[@]}") # Americas
            elif [ "$choice" = 3 ]; then
                langchoice=("${langconaf[@]}") # Africa
            elif [ "$choice" = 4 ]; then
                langchoice=("${langconother[@]}") # Others
            fi
        else
            return
        fi
        menu_header="Language (More Options)"
        menu_option_title="Choose a language:"
        select_option "${langchoice[@]}"
        choice=$?
        menu_header="Language Setup"
        selected_lang="${langchoice[$choice]%% (*}"
        if confirm "                 Confirm setting language to $selected_lang ?"; then
            acu locale generate "$selected_lang" -y
        else
            langchoicemenu
            return
        fi
    }

    lclist=$(acu locale list-available)

    lapicount=0
    while [ $lapicount -lt 10 ]; do
        netlang=$(curl -s https://ipapi.co/languages)
        if echo "$netlang" | grep -q "RateLimited"; then
            echo "Error"
            sleep 2
            lapicount=$((lapicount + 1))
        else
            break  # Exit the loop if there's no error
        fi
    done
    network_lang=()
    IFS=',' read -ra network_lang <<< "$netlang"

    options=()
    for ((i = 0; i < ${#network_lang[@]}-1; i++)); do
        options+=("${network_lang[i]}")
    done
    sgdindx=$i
    options+=("More Languages" "Skip setting Language")

    menu_header="Language"
    menu_option_title="\Zb          Let's begin with setting up your language, is that right?\Zn\n\nSuggested Languages:"
    select_option "${options[@]}"
    choice=$?

    if [ "$choice" = "$sgdindx" ]; then
        langchoicemenu
    elif [ "$choice" -ge "$sgdindx" ]; then
        echo "Skipping ..."
    else
        selected_lang=$(echo "${options[$choice]}" | tr '-' '_')
        echo "Set Language to $selected_lang"
        acu locale generate "$selected_lang" -y
    fi

    ################################################################
    # Time Zone

    menu_header="Time Zone"
    ntz="$(acu time network-time-zone  | sed 's/\x1b[0-9]//g')"
    menu_option_title="\Zb          Your time zone is: $ntz, is that right?\Zn\n"
    options=("Yes, this is correct" "No, let me correct my Time Zone" "Skip setting Time Zone")
    select_option "${options[@]}"
    choice=$?

    if [ "$choice" = 0 ]; then
        acu "time" set-time-zone sync
        stz=$ntz
    elif [ "$choice" = 1 ]; then
        stz=$(input "Enter new time zone (e.g., Asia/Tokyo)")
        acu "time" set-time-zone $stz
    else
        echo "Skipping ..."
    fi

    ################################################################
    # Setup User Account
    user_setup() {
        menu_header="User Account"
        menu_option_title="Create a new user account:"
        menu_form_value=("user" "" "" "y")
        local result=($(form "Username" "Password" "Confirm Password" "Disable Root Login? [Y/n]"))
        if [ "${#result[@]}" -gt 4 ]; then
            info_alert "Username / Password can not contain space."
            sleep 1
            user_setup
        elif [ "${result[1]}" != "${result[2]}" ]; then
            info_alert "Confirm password does not match."
            sleep 1
            user_setup
        elif [ "${#result[@]}" -lt 4 ]; then
            info_alert "Fields can not be empty."
            sleep 1
            user_setup
        elif [[ "${result[3]}" != [YyNn] ]]; then
            info_alert "Please answer y or n to [Y/n] questions."
            sleep 1
            user_setup
        else
            user_acc=(${result[@]})
        fi
    }
    user_setup

    ################################################################
    # Select linux kernel
    kernel_menu() {
        menu_header="Linux Kernel"
        menu_option_title="Select a linux kernel to install :\n\n\Zb\Z2           Linux Kernel           (Repo)                                     Description                (Kernel Version)"
        options=()

        # Kernel options for each install target
        # format: kernelpkg (repo) - Description (linux_kernel_version)
        # notes: put the recommended option at first line and mark (Recommended) in Description

        # options to show in all images
        if [ "$install_target" = "rock5" ] || [ "$install_target" = "rock2" ] || [ "$install_target" = "edge2" ] || [ "$install_target" = "orangepi5" ] || [ "$install_target" = "zero3" ] || [ "$install_target" = "rockchip" ]; then
            options+=("linux-aarch64-rockchip-bsp5.10-joshua (7Ji)                     - (Recommended) Install Joshua Linux Rockchip Kernel (Linux 5.10.160)")
            options+=("linux-aarch64-rockchip-bsp6.1-joshua-git (7Ji)                  - Install Joshua Linux Rockchip 6.1 Kernel (Linux 6.1.43)")
        elif [ "$install_target" = "rpi" ]; then
            options+=("linux-rpi (alarm)                                               - Install Linux Raspberry Pi BSP Kernel (Linux 6.6)")
            options+=("linux-rpi-16k (alarm)                                           - Install Linux Raspberry Pi BSP Kernel with 16k pagesize for bcm2712/RPi5 ONLY (Linux 6.6)")
            options+=("linux-aarch64 (alarm)                                           - Install Linux Mainline Kernel (Linux mainline latest)")
        elif [ "$install_target" = "asahi" ]; then
            options+=("linux-asahi (Experimental)                                      - Install Linux Asahi Kernel (Linux 6.6)")
            options+=("linux-aarch64 (alarm)                                           - Install Linux Mainline Kernel (Linux mainline latest)")
        else
            options+=("linux-aarch64 (alarm)                                           - Install Linux Mainline Kernel (Linux mainline latest)")
        fi 
    
        if [ "$install_target" = "rock5" ] || [ "$install_target" = "rock2" ]; then 
            options+=("linux-aarch64-rockchip-bsp5.10-radxa-git (7Ji)                  - Install Linux Radxa Rockchip BSP 5.10 Kernel (Linux 5.10-rkr4.1)")
        fi 
    
        if [ "$install_target" = "orangepi5" ]; then
            options+=("linux-aarch64-rockchip-rk3588-bsp5.10-orangepi (7Ji)            - (Recommended) Install AArch64 Rockchip vendor kernel (BSP5.10 for RK3588, OrangePi fork) (Linux 5.10.110)")
            options+=("linux-aarch64-rockchip-rk3588-bsp5.10-orangepi-git (7Ji)        - Install AArch64 Rockchip vendor kernel (BSP5.10 for RK3588, OrangePi fork) (Linux 5.10.160)")
        fi 

        # options to show only in dev images
        if [ "$branch" = "dev" ]; then

            if [ "$install_target" = "rock5" ] || [ "$install_target" = "rock2" ]; then 
                options+=("linux-aarch64-rockchip-bsp5.10-radxa-bin (Experimental)         - Install Linux Radxa Rockchip BSP 5.10 Kernel (Linux 5.10.110)")
                options+=("linux-aarch64-rockchip-bsp6.1-radxa-bin (Experimental)          - Install Linux Radxa Rockchip BSP 6.1 Kernel (Linux 6.1.43)")
            fi

            if [ "$install_target" = "rock5" ] || [ "$install_target" = "edge2" ] || [ "$install_target" = "orangepi5" ] || [ "$install_target" = "zero3" ] || [ "$install_target" = "rockchip" ]; then
                options+=("linux-aarch64-rockchip-bsp6.1-joshua-bin (7Ji,Experimental)         - Install Joshua Linux Rockchip 6.1 Kernel deb version (Linux 6.1.43)")
                options+=("linux-aarch64-rockchip-bsp6.1-joshua-panthor-git (Experimental) - Install Joshua Linux Rockchip 6.1 Kernel with Panthor (Linux 6.1.43)")
                options+=("linux-aarch64-rk3588-collabora-git (Experimental)               - Install Linux Collabora Mainline RK3588 Kernel (Linux 6.9)")
                options+=("linux-aarch64-rockchip-bsp (7Ji)                                - (Experimental) Install wyf9661 Linux Rockchip 6.1 Kernel (Linux 6.1.57)")
                options+=("linux-aarch64-7ji (7Ji)                                         - Install Linux Mainline Kernel with patches for Amlogic devices and RK3588 (Linux mainline latest)")
                options+=("linux-aarch64 (7Ji)                                             - Install Linux Mainline Kernel (This is actually from alarm repo) (Linux mainline latest)")
            fi
        fi 

        options+=("(Others) Enter custom kernel options (Coming Soon)")
        select_option "${options[@]}"
        krl_options=$?
        selected_option="${options[$krl_options]}"
        kernelpkg=$(echo "$selected_option" | awk '{print $1}')
        pacmanrepo=($(echo "$selected_option" | awk '{print $2}' | tr -d '()' | tr ',' ' '))

        if [ "$kernelpkg" = "(Others)" ]; then
            kernel_menu
            #return
        fi
    }
    kernel_menu

    ################################################################
    # Select desktop environment

    menu_header="Desktop Environment"
    menu_option_title="Select a desktop environment to install :"
    options=("Gnome (Full)" "Gnome (Minimal)" "KDE Plasma (Full)" "KDE Plasma (No KDE Apps)" "Budgie Desktop" "Sway" "Cutefish (Experimental)" "XFCE (Experimental)" "LXQt" "LXDE" "MATE" "Cinnamon" "Hyprland")
    options+=("Do not install a Desktop Environment")

    select_option "${options[@]}"
    de_options=$?
    selected_de=${options[de_options]}

    ################################################################
    # Select additional packages
    menu_header="Additional Packages"
    menu_option_title="Select additional packages to install :"
    options=()
    #select_option "${options[@]}"
    #apps_options=$?
    #echo "Coming Soon"

    ################################################################
    # Installation Summary
    menu_header="Installation Summary"
    repostring="${pacmanrepo[@]}"
    if confirm " Confirm to install with the following configurations? \n Note: System will reboot several times during installation. \n\n <Localization> \n Language: $selected_lang \n Time Zone: $stz \n <User Account> \n Username: ${user_acc[0]} \n Password: ${user_acc[1]} \n Disable Root Account: ${user_acc[3]} \n <System / Packages> \n Linux Kernel: $kernelpkg \n Repositories: $repostring \n Graphics Acceleration: mesa \n Video Acceleration: ffmpeg \n Desktop Environment: $selected_de \n"; then
        install_part1
    else
        main_menu
    fi
}
################################################################
# Main Menu
main_menu() {

    # Welcome Menu
    menu_header=""
    menu_option_title=""
    options=("Install Arch Linux" "Try Arch Linux (GUI)" "About this Installer" "Exit Installer")
    select_option "${options[@]}"
    selected=$?

    case $selected in
    0)
        installer_menu
        ;;
    1)
        if confirm "   This will download a 1GB image. Are you sure to continue (Coming Soon)?"; then
            info_alert "Coming Soon"
            sleep 3
            main_menu
        else
            main_menu
        fi
        exit 0
        ;;
    2)
        info_alert "\n Installer Version: $installerver \n ACU Version: $acuver"
        sleep 3
        main_menu
        exit 0
        ;;
    *)
        if confirm "   Are you sure to exit the installer? The system will shutdown."; then
            shutdown now
        else
            main_menu
        fi
        exit 0
        ;;
    esac
}
    #dialog --title "fselect" --fselect ~/Documents/GitHub/ 15 80
################################################################
# About this Installer

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    colorecho "$BLUE" "Arch Linux Installer for ARM (Aarch64)"
    colorecho "$GREEN" "Installer Version: $installerver"
    colorecho "$GREEN" "Required ACU Version: $acuver ($(echo $(acu -v | sed 's/\x1b\[[0-9;]*[mGKHF]//g') | grep -o '[0-9].[0-9].[0-9].*') Installed)"
    echo "Usage: installer <optional_argument>"

    colorecho "$GREEN" "Options"
    echo "-h / --help : Usage and Infomation of this installer"
    echo "--skip-install-pkg : Skip installing required packages on first boot"
    echo "--create-installer-service : Create a service to auto start this installer on first boot"
    exit 0
elif [ "$1" = "--create-installer-service" ]; then
    echo -e "[Unit]\nDescription=Arch Linux Installer for ARM\nAfter=network.target\nBefore=systemd-logind.service getty@tty1.service\n\n[Service]\nType=oneshot\nTTYPath=/dev/tty13\nExecStartPre=/usr/bin/chvt 13\nExecStart=/usr/bin/installer\nExecStartPost=/usr/bin/chvt 1\nTimeoutStartSec=0\nStandardInput=tty\nTTYVHangup=yes\nTTYVTDisallocate=yes\n\n[Install]\nWantedBy=default.target\nRequiredBy=sshd.service systemd-logind.service getty@tty1.service" | tee /etc/systemd/system/installer.service && systemctl enable installer.service
    exit 0
elif [ "$1" = "part2" ] && [ ! "$(id -u)" -eq 0 ]; then
    install_part2
    exit 0
fi
################################################################
# Main Code
title

# First Boot : Install Required Packages
if [ -d "$compiled_pkg_folder" ]; then
    if [ ! "$1" = "--skip-install-pkg" ]; then
        colorecho "$GREEN" "Installing Required Packages ..."
        if pacman -U --overwrite \* $compiled_pkg_folder/*.pkg.tar.* --needed --noconfirm; then
            echo "Removing packages archives ..."
            rm -rf $compiled_pkg_folder

            # Ensure SSL (Sync Clock)
            colorecho "$GREEN" "Enabling Time Sync ..."
            systemctl enable systemd-timesyncd

            colorecho "$GREEN" "System will reboot now."
            if ! reboot --force; then
                echo "Unable to reboot automatically, please reboot your device manually."
            fi 
        else
            colorecho "$RED" "Failed to install Required Packages. The image may be broken, try flashing the image again."
            sleep 5
            exit 1
        fi
    fi
fi

# Create TUI Theme
if [ ! -f "$dialog_theme_config" ]; then
    create_dialog_theme
fi

# Network option menu
network_menu

# Check Updates
check_installer_updates

# Start Main Menu
main_menu

################################################################