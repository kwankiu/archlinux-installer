name: Build Arch Linux Installer (UEFI)

# Controls when the workflow will run
on:
  push:
    tags:
      #- 'b*'
      - 'UEFI*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build Images
    permissions:
      contents: write

    strategy:
      matrix:
        model_name:
          # Generic
          - generic
          # Asahi (Apple Silicon)
          - asahi
          ## Raspberry Pi UEFI ##
          #- raspberrypi
          ## RK3588-EDK2 ##
          # Radxa
          - radxa-rock-5a
          - radxa-rock-5b
          - radxa-rock-5c
          - radxa-rock-5-itx
          - radxa-cm5
          # Orange Pi
          - orangepi-5 #rockchip-rk3588s-orangepi-5
          - orangepi-5plus
          # Khadas
          #- khadas-edge2
          # Nano Pi
          - friendlyelec-nanopc-t6
          - friendlyelec-nanopi-r6c
          - friendlyelec-nanopi-r6s
          # Firefly
          - firefly-roc-rk3588s-pc
          - firefly-itx-3588j
          - firefly-aio-3588q
          # Other Rockchip
          - indiedroid-nova #9tripod-rk3588s
          - mixtile-blade3 #rockchip-rk3588-blade3-v101-linux
          - stationpc-station-m3
          - mekotronics-r58x
          - mekotronics-r58-mini
          - hinlink-h88k
          #- fydetab-duo #rockchip-rk3588s-tablet-12c-linux
          # Add more models as needed

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Preparing
        run: |
          for model in ${{ matrix.model_name }}; do
            echo "Building image for $model"
            case $model in
              radxa-* | khadas-* | mixtile-* | mekotronics-* | stationpc-* | hinlink-* | firefly-* | orangepi-* | indiedroid-*)
                if [[ "$model" == "orangepi"* ]] || [[ "$model" == "indiedroid"* ]]; then
                  bootfw_url="https://github.com/edk2-porting/edk2-rk3588/releases/download/v0.11.2/${model}_UEFI_Release_v0.11.2.img"
                elif [[ "$model" == "radxa-rock-5c" ]]; then
                  bootfw_url="https://github.com/kwankiu/edk2-rk3588/releases/download/debug/rock-5c_UEFI_Debug_c166f5a.img"
                elif [[ "$model" == "radxa-cm5" ]]; then
                  bootfw_url="https://github.com/kwankiu/edk2-rk3588/releases/download/debug/radxa-cm5_UEFI_Debug_c166f5a.img"
                else
                  bootfw_url="https://github.com/edk2-porting/edk2-rk3588/releases/download/v0.11.2/${model#*-}_UEFI_Release_v0.11.2.img"
                fi
                bootfw="$(basename $bootfw_url)"
                args="--kernel=linux-aarch64-rockchip-bsp6.1-joshua-git --addpkg=linux-firmware-joshua-git --bootfirmware=${bootfw} -b --bootpartstart=9MiB"
                ;;
              fydetab-*)
                bootfw_url="https://github.com/kwankiu/edk2-rk3588/releases/download/debug/fydetab-duo_UEFI_Debug_fc0a209.img"
                bootfw="$(basename $bootfw_url)"
                args="--kernel=linux-aarch64-rockchip-bsp5.10-fydetab --bootfirmware=${bootfw} -b --bootpartstart=9MiB"
                ;;
              asahi)
                args="--kernel=linux-asahi -e --bootpartstart=1MB --bootpartend=201MB"
                ;;
              *)
                # Generic
                args="--kernel=linux -b"
                ;;
            esac
          done
          echo "ARGS=$args" >> $GITHUB_ENV
          echo "BOOTFW_URL=$bootfw_url" >> $GITHUB_ENV
  
      - name: Download UEFI Firmware
        if: ${{ env.BOOTFW_URL }}
        env:
          bootfw_url: ${{ env.BOOTFW_URL }}
        run: |
          curl -LJO ${bootfw_url}
          ls -l

      - name: Build Image
        env:
          args: ${{ env.ARGS }}
        run: |
          bash <(curl -fsSL https://raw.githubusercontent.com/kwankiu/archlinux-installer/dev/create-installation-media) --model=${{ matrix.model_name }} --image=${{ matrix.model_name }}-archlinux-installer-uefi.img --bootloader=grub -c $args
          cp -r out/*-archlinux-*.*.xz .

      - name: Add xze metadata to Image (OOWOW)
        if: startsWith(matrix.model_name, 'khadas')
        run: |
          bash <(curl -fsSL https://raw.githubusercontent.com/khadas/krescue/master/tools/xze) "${{ matrix.model_name }}-archlinux-installer-uefi.img.xz" \
             --meta \
             label="Arch Linux Installer" \
             builder="Arch Linux Installer" \
             date="$(LANG=C TZ= date)" \
             match=BOARD=$(echo "${{ matrix.model_name }}" | awk -F'-' '{print toupper(substr($2,1,1)) substr($2,2)}') \
             link=https://github.com/kwankiu/archlinux-installer/wiki \
             duration=250 \
             desc="Community-built Arch Linux Installer for ARM (Aarch64), UEFI Image built for $(echo "${{ matrix.model_name }}" | sed 's/-/ /g; s/\b\(.\)/\u\1/g')"
          # Rename image name to begin with the board model (required to prevent OOWOW hiding the image)
          mv ${{ matrix.model_name }}-archlinux-installer-uefi.img.xz $(echo "${{ matrix.model_name }}" | awk -F'-' '{print substr($2,1)}')-khadas-archlinux-installer-uefi.img.xz
        continue-on-error: true

      - name: Upload to GitHub Release
        uses: ncipollo/release-action@v1
        with:
            artifacts: "*-archlinux-*.*.xz"
            makeLatest: false
            allowUpdates: true
            omitBody: true