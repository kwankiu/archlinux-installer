name: Build Arch Linux Installer (U-Boot + Extlinux)

# Controls when the workflow will run
on:
  push:
    tags:
      - 'b*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build Images
    permissions:
      contents: write

    strategy:
      matrix:
        model_name:
          # Generic
          - generic
          # Asahi (Apple Silicon)
          - asahi
          # Raspberry Pi
          - raspberrypi
          # Radxa
          - radxa-rock-5a
          - radxa-rock-5b
          #- radxa-rock-5b-plus
          #- radxa-rock-5c
          #- radxa-rock-5d
          - radxa-rock-5-itx
          - radxa-rock-2a
          - radxa-zero-3
          - radxa-cm5
          - radxa-nx5
          # Khadas
          - khadas-edge2
          #- khadas-edgev
          #- khadas-edge
          # Orange Pi
          - orangepi-5 #rockchip-rk3588s-orangepi-5
          - orangepi-5b
          - orangepi-5-plus
          #- orangepi-3b
          #- orangepi-5-pro
          #- orangepi-cm5
          # Nano Pi
          #- friendlyelec-nanopc-t6
          #- friendlyelec-nanopi-r6c
          #- friendlyelec-nanopi-r6s
          #- indiedroid-nova #9tripod-rk3588s
          #- mixtile-blade3 #rockchip-rk3588-blade3-v101-linux
          #- mixtile-core3588e
          #- embedfire-lubancat-4 #rockchip-rk3588s-lubancat-4
          #- turing-rk1
          #- armsom-sige7 #rockchip-rk3588-armsom-sige7
          #- armsom-w3 #rockchip-rk3588-armsom-w3
          # Others
          # Add more models as needed

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Preparing
        run: |
          for model in ${{ matrix.model_name }}; do
            echo "Building image for $model"
            case $model in
              asahi)
                args="--kernel=linux-asahi"
                ;;
              raspberrypi)
                # Notes: Raspberry Pi does not use extlinux and does not need to pack u-boot
                args="--kernel=linux-rpi --addpkg=firmware-raspberrypi -b --bootpartstart=4MiB"
                ;;
              radxa-zero*)
                model_name="${model#*-}"
                args="--kernel=linux-rockchip-joshua-git --addpkg=linux-firmware-joshua-git --uboot=usr/lib/u-boot/${model_name}"
                uboot_url="https://github.com/radxa-repo/bullseye/raw/gh-pages/.pool/u-boot-latest_2023.10-9-eed05a18_arm64.deb"
                ;;
              radxa-*)
                model_name="${model#*-}"
                args="--kernel=linux-rockchip-joshua-git --addpkg=linux-firmware-joshua-git --uboot=usr/lib/u-boot/${model_name}"
                uboot_url="https://github.com/radxa-repo/bullseye/raw/gh-pages/.pool/u-boot-rknext_2017.09-25-f348cc9_arm64.deb"
                ;;
              khadas-*)
                args="--kernel=linux-rockchip-joshua-git --addpkg=linux-firmware-joshua-git --uboot=usr/lib/u-boot"
                uboot_url="https://dl.khadas.com/repos/edge2/pool/main/l/linux-u-boot-edge2-vendor/linux-u-boot-edge2-vendor_1.6.5-2017.09_arm64.deb"
                ;;
              orangepi-*)
                args="--kernel=linux-aarch64-orangepi5-git --addpkg=linux-firmware-orangepi-git --uboot=usr/lib/u-boot -b"
                uboot_url="https://launchpad.net/~jjriek/+archive/ubuntu/rockchip/+files/u-boot-${model}_2017.09+20230704.git1f70ac3a-9_arm64.deb"
                ;;
              *)
                # Generic
                args="--kernel=linux-aarch64"
                ;;
            esac
          done
          echo "ARGS=$args" >> $GITHUB_ENV
          echo "UBOOT_URL=$uboot_url" >> $GITHUB_ENV
  
      - name: Extract U-Boot
        if: ${{ env.UBOOT_URL }}
        env:
          uboot_url: ${{ env.UBOOT_URL }}
        run: |
          curl -L ${uboot_url} -o uboot.deb
          ar xv uboot.deb
          if [ -f "data.tar.xz" ]; then
            tar -xf data.tar.xz
          elif [ -f "data.tar.zst" ]; then
            tar -xI unzstd -f data.tar.zst
          fi
          ls -l

      - name: Build Image
        env:
          args: ${{ env.ARGS }}
        run: |
          bash <(curl -fsSL https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/dev/create-installation-media) --model=${{ matrix.model_name }} --image=${{ matrix.model_name }}-archlinux-installer.img -c $args
          cp -r out/*-archlinux-*.img.xz .

      - name: Add meta data to Image (OOWOW)
        if: startsWith(matrix.model_name, 'khadas')
        run: |
          bash <(curl -fsSL https://raw.githubusercontent.com/khadas/krescue/master/tools/xze) "${{ matrix.model_name }}-archlinux-installer.img.xz" \
             --meta \
             label="Arch Linux Installer" \
             builder="Arch Linux Installer" \
             date="$(LANG=C TZ= date)" \
             match=BOARD=Edge2 \
             link=https://github.com/kwankiu/archlinux-installer-rock5/wiki \
             duration=250 \
             desc="Community-built Arch Linux Installer for ARM (Aarch64), Image built for ${{ matrix.model_name }}"
        continue-on-error: true

      - name: Upload to GitHub Release
        uses: ncipollo/release-action@v1
        with:
            artifacts: "*-archlinux-*.img.xz"
            makeLatest: false
            allowUpdates: true
            omitBody: true